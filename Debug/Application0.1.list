
Application0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002680  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08022810  08022810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080228d8  080228d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080228d8  080228d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080228e0  080228e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080228e0  080228e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080228e4  080228e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080228e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000034  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000a4  200000a4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000413a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001089  00000000  00000000  000241da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c0  00000000  00000000  00025268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000418  00000000  00000000  00025728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020709  00000000  00000000  00025b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005708  00000000  00000000  00046249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c13ae  00000000  00000000  0004b951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ccff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018fc  00000000  00000000  0010cd50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000070 	.word	0x20000070
 80201ac:	00000000 	.word	0x00000000
 80201b0:	080227f8 	.word	0x080227f8

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	20000074 	.word	0x20000074
 80201cc:	080227f8 	.word	0x080227f8

080201d0 <memchr>:
 80201d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201d4:	2a10      	cmp	r2, #16
 80201d6:	db2b      	blt.n	8020230 <memchr+0x60>
 80201d8:	f010 0f07 	tst.w	r0, #7
 80201dc:	d008      	beq.n	80201f0 <memchr+0x20>
 80201de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201e2:	3a01      	subs	r2, #1
 80201e4:	428b      	cmp	r3, r1
 80201e6:	d02d      	beq.n	8020244 <memchr+0x74>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	b342      	cbz	r2, 8020240 <memchr+0x70>
 80201ee:	d1f6      	bne.n	80201de <memchr+0xe>
 80201f0:	b4f0      	push	{r4, r5, r6, r7}
 80201f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80201f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80201fa:	f022 0407 	bic.w	r4, r2, #7
 80201fe:	f07f 0700 	mvns.w	r7, #0
 8020202:	2300      	movs	r3, #0
 8020204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020208:	3c08      	subs	r4, #8
 802020a:	ea85 0501 	eor.w	r5, r5, r1
 802020e:	ea86 0601 	eor.w	r6, r6, r1
 8020212:	fa85 f547 	uadd8	r5, r5, r7
 8020216:	faa3 f587 	sel	r5, r3, r7
 802021a:	fa86 f647 	uadd8	r6, r6, r7
 802021e:	faa5 f687 	sel	r6, r5, r7
 8020222:	b98e      	cbnz	r6, 8020248 <memchr+0x78>
 8020224:	d1ee      	bne.n	8020204 <memchr+0x34>
 8020226:	bcf0      	pop	{r4, r5, r6, r7}
 8020228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802022c:	f002 0207 	and.w	r2, r2, #7
 8020230:	b132      	cbz	r2, 8020240 <memchr+0x70>
 8020232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020236:	3a01      	subs	r2, #1
 8020238:	ea83 0301 	eor.w	r3, r3, r1
 802023c:	b113      	cbz	r3, 8020244 <memchr+0x74>
 802023e:	d1f8      	bne.n	8020232 <memchr+0x62>
 8020240:	2000      	movs	r0, #0
 8020242:	4770      	bx	lr
 8020244:	3801      	subs	r0, #1
 8020246:	4770      	bx	lr
 8020248:	2d00      	cmp	r5, #0
 802024a:	bf06      	itte	eq
 802024c:	4635      	moveq	r5, r6
 802024e:	3803      	subeq	r0, #3
 8020250:	3807      	subne	r0, #7
 8020252:	f015 0f01 	tst.w	r5, #1
 8020256:	d107      	bne.n	8020268 <memchr+0x98>
 8020258:	3001      	adds	r0, #1
 802025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802025e:	bf02      	ittt	eq
 8020260:	3001      	addeq	r0, #1
 8020262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020266:	3001      	addeq	r0, #1
 8020268:	bcf0      	pop	{r4, r5, r6, r7}
 802026a:	3801      	subs	r0, #1
 802026c:	4770      	bx	lr
 802026e:	bf00      	nop

08020270 <__aeabi_uldivmod>:
 8020270:	b953      	cbnz	r3, 8020288 <__aeabi_uldivmod+0x18>
 8020272:	b94a      	cbnz	r2, 8020288 <__aeabi_uldivmod+0x18>
 8020274:	2900      	cmp	r1, #0
 8020276:	bf08      	it	eq
 8020278:	2800      	cmpeq	r0, #0
 802027a:	bf1c      	itt	ne
 802027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020284:	f000 b974 	b.w	8020570 <__aeabi_idiv0>
 8020288:	f1ad 0c08 	sub.w	ip, sp, #8
 802028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020290:	f000 f806 	bl	80202a0 <__udivmoddi4>
 8020294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802029c:	b004      	add	sp, #16
 802029e:	4770      	bx	lr

080202a0 <__udivmoddi4>:
 80202a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202a4:	9d08      	ldr	r5, [sp, #32]
 80202a6:	4604      	mov	r4, r0
 80202a8:	468e      	mov	lr, r1
 80202aa:	2b00      	cmp	r3, #0
 80202ac:	d14d      	bne.n	802034a <__udivmoddi4+0xaa>
 80202ae:	428a      	cmp	r2, r1
 80202b0:	4694      	mov	ip, r2
 80202b2:	d969      	bls.n	8020388 <__udivmoddi4+0xe8>
 80202b4:	fab2 f282 	clz	r2, r2
 80202b8:	b152      	cbz	r2, 80202d0 <__udivmoddi4+0x30>
 80202ba:	fa01 f302 	lsl.w	r3, r1, r2
 80202be:	f1c2 0120 	rsb	r1, r2, #32
 80202c2:	fa20 f101 	lsr.w	r1, r0, r1
 80202c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ca:	ea41 0e03 	orr.w	lr, r1, r3
 80202ce:	4094      	lsls	r4, r2
 80202d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202d4:	0c21      	lsrs	r1, r4, #16
 80202d6:	fbbe f6f8 	udiv	r6, lr, r8
 80202da:	fa1f f78c 	uxth.w	r7, ip
 80202de:	fb08 e316 	mls	r3, r8, r6, lr
 80202e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80202e6:	fb06 f107 	mul.w	r1, r6, r7
 80202ea:	4299      	cmp	r1, r3
 80202ec:	d90a      	bls.n	8020304 <__udivmoddi4+0x64>
 80202ee:	eb1c 0303 	adds.w	r3, ip, r3
 80202f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80202f6:	f080 811f 	bcs.w	8020538 <__udivmoddi4+0x298>
 80202fa:	4299      	cmp	r1, r3
 80202fc:	f240 811c 	bls.w	8020538 <__udivmoddi4+0x298>
 8020300:	3e02      	subs	r6, #2
 8020302:	4463      	add	r3, ip
 8020304:	1a5b      	subs	r3, r3, r1
 8020306:	b2a4      	uxth	r4, r4
 8020308:	fbb3 f0f8 	udiv	r0, r3, r8
 802030c:	fb08 3310 	mls	r3, r8, r0, r3
 8020310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020314:	fb00 f707 	mul.w	r7, r0, r7
 8020318:	42a7      	cmp	r7, r4
 802031a:	d90a      	bls.n	8020332 <__udivmoddi4+0x92>
 802031c:	eb1c 0404 	adds.w	r4, ip, r4
 8020320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020324:	f080 810a 	bcs.w	802053c <__udivmoddi4+0x29c>
 8020328:	42a7      	cmp	r7, r4
 802032a:	f240 8107 	bls.w	802053c <__udivmoddi4+0x29c>
 802032e:	4464      	add	r4, ip
 8020330:	3802      	subs	r0, #2
 8020332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020336:	1be4      	subs	r4, r4, r7
 8020338:	2600      	movs	r6, #0
 802033a:	b11d      	cbz	r5, 8020344 <__udivmoddi4+0xa4>
 802033c:	40d4      	lsrs	r4, r2
 802033e:	2300      	movs	r3, #0
 8020340:	e9c5 4300 	strd	r4, r3, [r5]
 8020344:	4631      	mov	r1, r6
 8020346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802034a:	428b      	cmp	r3, r1
 802034c:	d909      	bls.n	8020362 <__udivmoddi4+0xc2>
 802034e:	2d00      	cmp	r5, #0
 8020350:	f000 80ef 	beq.w	8020532 <__udivmoddi4+0x292>
 8020354:	2600      	movs	r6, #0
 8020356:	e9c5 0100 	strd	r0, r1, [r5]
 802035a:	4630      	mov	r0, r6
 802035c:	4631      	mov	r1, r6
 802035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020362:	fab3 f683 	clz	r6, r3
 8020366:	2e00      	cmp	r6, #0
 8020368:	d14a      	bne.n	8020400 <__udivmoddi4+0x160>
 802036a:	428b      	cmp	r3, r1
 802036c:	d302      	bcc.n	8020374 <__udivmoddi4+0xd4>
 802036e:	4282      	cmp	r2, r0
 8020370:	f200 80f9 	bhi.w	8020566 <__udivmoddi4+0x2c6>
 8020374:	1a84      	subs	r4, r0, r2
 8020376:	eb61 0303 	sbc.w	r3, r1, r3
 802037a:	2001      	movs	r0, #1
 802037c:	469e      	mov	lr, r3
 802037e:	2d00      	cmp	r5, #0
 8020380:	d0e0      	beq.n	8020344 <__udivmoddi4+0xa4>
 8020382:	e9c5 4e00 	strd	r4, lr, [r5]
 8020386:	e7dd      	b.n	8020344 <__udivmoddi4+0xa4>
 8020388:	b902      	cbnz	r2, 802038c <__udivmoddi4+0xec>
 802038a:	deff      	udf	#255	; 0xff
 802038c:	fab2 f282 	clz	r2, r2
 8020390:	2a00      	cmp	r2, #0
 8020392:	f040 8092 	bne.w	80204ba <__udivmoddi4+0x21a>
 8020396:	eba1 010c 	sub.w	r1, r1, ip
 802039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 802039e:	fa1f fe8c 	uxth.w	lr, ip
 80203a2:	2601      	movs	r6, #1
 80203a4:	0c20      	lsrs	r0, r4, #16
 80203a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203aa:	fb07 1113 	mls	r1, r7, r3, r1
 80203ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203b2:	fb0e f003 	mul.w	r0, lr, r3
 80203b6:	4288      	cmp	r0, r1
 80203b8:	d908      	bls.n	80203cc <__udivmoddi4+0x12c>
 80203ba:	eb1c 0101 	adds.w	r1, ip, r1
 80203be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80203c2:	d202      	bcs.n	80203ca <__udivmoddi4+0x12a>
 80203c4:	4288      	cmp	r0, r1
 80203c6:	f200 80cb 	bhi.w	8020560 <__udivmoddi4+0x2c0>
 80203ca:	4643      	mov	r3, r8
 80203cc:	1a09      	subs	r1, r1, r0
 80203ce:	b2a4      	uxth	r4, r4
 80203d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203d4:	fb07 1110 	mls	r1, r7, r0, r1
 80203d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203dc:	fb0e fe00 	mul.w	lr, lr, r0
 80203e0:	45a6      	cmp	lr, r4
 80203e2:	d908      	bls.n	80203f6 <__udivmoddi4+0x156>
 80203e4:	eb1c 0404 	adds.w	r4, ip, r4
 80203e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80203ec:	d202      	bcs.n	80203f4 <__udivmoddi4+0x154>
 80203ee:	45a6      	cmp	lr, r4
 80203f0:	f200 80bb 	bhi.w	802056a <__udivmoddi4+0x2ca>
 80203f4:	4608      	mov	r0, r1
 80203f6:	eba4 040e 	sub.w	r4, r4, lr
 80203fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80203fe:	e79c      	b.n	802033a <__udivmoddi4+0x9a>
 8020400:	f1c6 0720 	rsb	r7, r6, #32
 8020404:	40b3      	lsls	r3, r6
 8020406:	fa22 fc07 	lsr.w	ip, r2, r7
 802040a:	ea4c 0c03 	orr.w	ip, ip, r3
 802040e:	fa20 f407 	lsr.w	r4, r0, r7
 8020412:	fa01 f306 	lsl.w	r3, r1, r6
 8020416:	431c      	orrs	r4, r3
 8020418:	40f9      	lsrs	r1, r7
 802041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802041e:	fa00 f306 	lsl.w	r3, r0, r6
 8020422:	fbb1 f8f9 	udiv	r8, r1, r9
 8020426:	0c20      	lsrs	r0, r4, #16
 8020428:	fa1f fe8c 	uxth.w	lr, ip
 802042c:	fb09 1118 	mls	r1, r9, r8, r1
 8020430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020434:	fb08 f00e 	mul.w	r0, r8, lr
 8020438:	4288      	cmp	r0, r1
 802043a:	fa02 f206 	lsl.w	r2, r2, r6
 802043e:	d90b      	bls.n	8020458 <__udivmoddi4+0x1b8>
 8020440:	eb1c 0101 	adds.w	r1, ip, r1
 8020444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020448:	f080 8088 	bcs.w	802055c <__udivmoddi4+0x2bc>
 802044c:	4288      	cmp	r0, r1
 802044e:	f240 8085 	bls.w	802055c <__udivmoddi4+0x2bc>
 8020452:	f1a8 0802 	sub.w	r8, r8, #2
 8020456:	4461      	add	r1, ip
 8020458:	1a09      	subs	r1, r1, r0
 802045a:	b2a4      	uxth	r4, r4
 802045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020460:	fb09 1110 	mls	r1, r9, r0, r1
 8020464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020468:	fb00 fe0e 	mul.w	lr, r0, lr
 802046c:	458e      	cmp	lr, r1
 802046e:	d908      	bls.n	8020482 <__udivmoddi4+0x1e2>
 8020470:	eb1c 0101 	adds.w	r1, ip, r1
 8020474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020478:	d26c      	bcs.n	8020554 <__udivmoddi4+0x2b4>
 802047a:	458e      	cmp	lr, r1
 802047c:	d96a      	bls.n	8020554 <__udivmoddi4+0x2b4>
 802047e:	3802      	subs	r0, #2
 8020480:	4461      	add	r1, ip
 8020482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020486:	fba0 9402 	umull	r9, r4, r0, r2
 802048a:	eba1 010e 	sub.w	r1, r1, lr
 802048e:	42a1      	cmp	r1, r4
 8020490:	46c8      	mov	r8, r9
 8020492:	46a6      	mov	lr, r4
 8020494:	d356      	bcc.n	8020544 <__udivmoddi4+0x2a4>
 8020496:	d053      	beq.n	8020540 <__udivmoddi4+0x2a0>
 8020498:	b15d      	cbz	r5, 80204b2 <__udivmoddi4+0x212>
 802049a:	ebb3 0208 	subs.w	r2, r3, r8
 802049e:	eb61 010e 	sbc.w	r1, r1, lr
 80204a2:	fa01 f707 	lsl.w	r7, r1, r7
 80204a6:	fa22 f306 	lsr.w	r3, r2, r6
 80204aa:	40f1      	lsrs	r1, r6
 80204ac:	431f      	orrs	r7, r3
 80204ae:	e9c5 7100 	strd	r7, r1, [r5]
 80204b2:	2600      	movs	r6, #0
 80204b4:	4631      	mov	r1, r6
 80204b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204ba:	f1c2 0320 	rsb	r3, r2, #32
 80204be:	40d8      	lsrs	r0, r3
 80204c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204c4:	fa21 f303 	lsr.w	r3, r1, r3
 80204c8:	4091      	lsls	r1, r2
 80204ca:	4301      	orrs	r1, r0
 80204cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204d0:	fa1f fe8c 	uxth.w	lr, ip
 80204d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204d8:	fb07 3610 	mls	r6, r7, r0, r3
 80204dc:	0c0b      	lsrs	r3, r1, #16
 80204de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80204e2:	fb00 f60e 	mul.w	r6, r0, lr
 80204e6:	429e      	cmp	r6, r3
 80204e8:	fa04 f402 	lsl.w	r4, r4, r2
 80204ec:	d908      	bls.n	8020500 <__udivmoddi4+0x260>
 80204ee:	eb1c 0303 	adds.w	r3, ip, r3
 80204f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80204f6:	d22f      	bcs.n	8020558 <__udivmoddi4+0x2b8>
 80204f8:	429e      	cmp	r6, r3
 80204fa:	d92d      	bls.n	8020558 <__udivmoddi4+0x2b8>
 80204fc:	3802      	subs	r0, #2
 80204fe:	4463      	add	r3, ip
 8020500:	1b9b      	subs	r3, r3, r6
 8020502:	b289      	uxth	r1, r1
 8020504:	fbb3 f6f7 	udiv	r6, r3, r7
 8020508:	fb07 3316 	mls	r3, r7, r6, r3
 802050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020510:	fb06 f30e 	mul.w	r3, r6, lr
 8020514:	428b      	cmp	r3, r1
 8020516:	d908      	bls.n	802052a <__udivmoddi4+0x28a>
 8020518:	eb1c 0101 	adds.w	r1, ip, r1
 802051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020520:	d216      	bcs.n	8020550 <__udivmoddi4+0x2b0>
 8020522:	428b      	cmp	r3, r1
 8020524:	d914      	bls.n	8020550 <__udivmoddi4+0x2b0>
 8020526:	3e02      	subs	r6, #2
 8020528:	4461      	add	r1, ip
 802052a:	1ac9      	subs	r1, r1, r3
 802052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020530:	e738      	b.n	80203a4 <__udivmoddi4+0x104>
 8020532:	462e      	mov	r6, r5
 8020534:	4628      	mov	r0, r5
 8020536:	e705      	b.n	8020344 <__udivmoddi4+0xa4>
 8020538:	4606      	mov	r6, r0
 802053a:	e6e3      	b.n	8020304 <__udivmoddi4+0x64>
 802053c:	4618      	mov	r0, r3
 802053e:	e6f8      	b.n	8020332 <__udivmoddi4+0x92>
 8020540:	454b      	cmp	r3, r9
 8020542:	d2a9      	bcs.n	8020498 <__udivmoddi4+0x1f8>
 8020544:	ebb9 0802 	subs.w	r8, r9, r2
 8020548:	eb64 0e0c 	sbc.w	lr, r4, ip
 802054c:	3801      	subs	r0, #1
 802054e:	e7a3      	b.n	8020498 <__udivmoddi4+0x1f8>
 8020550:	4646      	mov	r6, r8
 8020552:	e7ea      	b.n	802052a <__udivmoddi4+0x28a>
 8020554:	4620      	mov	r0, r4
 8020556:	e794      	b.n	8020482 <__udivmoddi4+0x1e2>
 8020558:	4640      	mov	r0, r8
 802055a:	e7d1      	b.n	8020500 <__udivmoddi4+0x260>
 802055c:	46d0      	mov	r8, sl
 802055e:	e77b      	b.n	8020458 <__udivmoddi4+0x1b8>
 8020560:	3b02      	subs	r3, #2
 8020562:	4461      	add	r1, ip
 8020564:	e732      	b.n	80203cc <__udivmoddi4+0x12c>
 8020566:	4630      	mov	r0, r6
 8020568:	e709      	b.n	802037e <__udivmoddi4+0xde>
 802056a:	4464      	add	r4, ip
 802056c:	3802      	subs	r0, #2
 802056e:	e742      	b.n	80203f6 <__udivmoddi4+0x156>

08020570 <__aeabi_idiv0>:
 8020570:	4770      	bx	lr
 8020572:	bf00      	nop

08020574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020574:	b580      	push	{r7, lr}
 8020576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020578:	f000 fa0e 	bl	8020998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802057c:	f000 f816 	bl	80205ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020580:	f000 f872 	bl	8020668 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application (%d.%d)\n",APP_Version[0],APP_Version[1]);
 8020584:	2300      	movs	r3, #0
 8020586:	2201      	movs	r2, #1
 8020588:	4619      	mov	r1, r3
 802058a:	4806      	ldr	r0, [pc, #24]	; (80205a4 <main+0x30>)
 802058c:	f001 f9a6 	bl	80218dc <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8020590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020594:	4804      	ldr	r0, [pc, #16]	; (80205a8 <main+0x34>)
 8020596:	f000 fd30 	bl	8020ffa <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 802059a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802059e:	f000 fa6d 	bl	8020a7c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80205a2:	e7f5      	b.n	8020590 <main+0x1c>
 80205a4:	08022810 	.word	0x08022810
 80205a8:	40020c00 	.word	0x40020c00

080205ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80205ac:	b580      	push	{r7, lr}
 80205ae:	b094      	sub	sp, #80	; 0x50
 80205b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80205b2:	f107 0320 	add.w	r3, r7, #32
 80205b6:	2230      	movs	r2, #48	; 0x30
 80205b8:	2100      	movs	r1, #0
 80205ba:	4618      	mov	r0, r3
 80205bc:	f001 f986 	bl	80218cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80205c0:	f107 030c 	add.w	r3, r7, #12
 80205c4:	2200      	movs	r2, #0
 80205c6:	601a      	str	r2, [r3, #0]
 80205c8:	605a      	str	r2, [r3, #4]
 80205ca:	609a      	str	r2, [r3, #8]
 80205cc:	60da      	str	r2, [r3, #12]
 80205ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80205d0:	2300      	movs	r3, #0
 80205d2:	60bb      	str	r3, [r7, #8]
 80205d4:	4b22      	ldr	r3, [pc, #136]	; (8020660 <SystemClock_Config+0xb4>)
 80205d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80205d8:	4a21      	ldr	r2, [pc, #132]	; (8020660 <SystemClock_Config+0xb4>)
 80205da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80205de:	6413      	str	r3, [r2, #64]	; 0x40
 80205e0:	4b1f      	ldr	r3, [pc, #124]	; (8020660 <SystemClock_Config+0xb4>)
 80205e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80205e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80205e8:	60bb      	str	r3, [r7, #8]
 80205ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80205ec:	2300      	movs	r3, #0
 80205ee:	607b      	str	r3, [r7, #4]
 80205f0:	4b1c      	ldr	r3, [pc, #112]	; (8020664 <SystemClock_Config+0xb8>)
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	4a1b      	ldr	r2, [pc, #108]	; (8020664 <SystemClock_Config+0xb8>)
 80205f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80205fa:	6013      	str	r3, [r2, #0]
 80205fc:	4b19      	ldr	r3, [pc, #100]	; (8020664 <SystemClock_Config+0xb8>)
 80205fe:	681b      	ldr	r3, [r3, #0]
 8020600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020604:	607b      	str	r3, [r7, #4]
 8020606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8020608:	2302      	movs	r3, #2
 802060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 802060c:	2301      	movs	r3, #1
 802060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8020610:	2310      	movs	r3, #16
 8020612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8020614:	2300      	movs	r3, #0
 8020616:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020618:	f107 0320 	add.w	r3, r7, #32
 802061c:	4618      	mov	r0, r3
 802061e:	f000 fd07 	bl	8021030 <HAL_RCC_OscConfig>
 8020622:	4603      	mov	r3, r0
 8020624:	2b00      	cmp	r3, #0
 8020626:	d001      	beq.n	802062c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8020628:	f000 f852 	bl	80206d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802062c:	230f      	movs	r3, #15
 802062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8020630:	2300      	movs	r3, #0
 8020632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020634:	2300      	movs	r3, #0
 8020636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8020638:	2300      	movs	r3, #0
 802063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 802063c:	2300      	movs	r3, #0
 802063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8020640:	f107 030c 	add.w	r3, r7, #12
 8020644:	2100      	movs	r1, #0
 8020646:	4618      	mov	r0, r3
 8020648:	f000 ff6a 	bl	8021520 <HAL_RCC_ClockConfig>
 802064c:	4603      	mov	r3, r0
 802064e:	2b00      	cmp	r3, #0
 8020650:	d001      	beq.n	8020656 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8020652:	f000 f83d 	bl	80206d0 <Error_Handler>
  }
}
 8020656:	bf00      	nop
 8020658:	3750      	adds	r7, #80	; 0x50
 802065a:	46bd      	mov	sp, r7
 802065c:	bd80      	pop	{r7, pc}
 802065e:	bf00      	nop
 8020660:	40023800 	.word	0x40023800
 8020664:	40007000 	.word	0x40007000

08020668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020668:	b580      	push	{r7, lr}
 802066a:	b086      	sub	sp, #24
 802066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802066e:	1d3b      	adds	r3, r7, #4
 8020670:	2200      	movs	r2, #0
 8020672:	601a      	str	r2, [r3, #0]
 8020674:	605a      	str	r2, [r3, #4]
 8020676:	609a      	str	r2, [r3, #8]
 8020678:	60da      	str	r2, [r3, #12]
 802067a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802067c:	2300      	movs	r3, #0
 802067e:	603b      	str	r3, [r7, #0]
 8020680:	4b11      	ldr	r3, [pc, #68]	; (80206c8 <MX_GPIO_Init+0x60>)
 8020682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020684:	4a10      	ldr	r2, [pc, #64]	; (80206c8 <MX_GPIO_Init+0x60>)
 8020686:	f043 0308 	orr.w	r3, r3, #8
 802068a:	6313      	str	r3, [r2, #48]	; 0x30
 802068c:	4b0e      	ldr	r3, [pc, #56]	; (80206c8 <MX_GPIO_Init+0x60>)
 802068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020690:	f003 0308 	and.w	r3, r3, #8
 8020694:	603b      	str	r3, [r7, #0]
 8020696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8020698:	2200      	movs	r2, #0
 802069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802069e:	480b      	ldr	r0, [pc, #44]	; (80206cc <MX_GPIO_Init+0x64>)
 80206a0:	f000 fc92 	bl	8020fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80206a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80206a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80206aa:	2301      	movs	r3, #1
 80206ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80206ae:	2300      	movs	r3, #0
 80206b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80206b2:	2300      	movs	r3, #0
 80206b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80206b6:	1d3b      	adds	r3, r7, #4
 80206b8:	4619      	mov	r1, r3
 80206ba:	4804      	ldr	r0, [pc, #16]	; (80206cc <MX_GPIO_Init+0x64>)
 80206bc:	f000 fae8 	bl	8020c90 <HAL_GPIO_Init>

}
 80206c0:	bf00      	nop
 80206c2:	3718      	adds	r7, #24
 80206c4:	46bd      	mov	sp, r7
 80206c6:	bd80      	pop	{r7, pc}
 80206c8:	40023800 	.word	0x40023800
 80206cc:	40020c00 	.word	0x40020c00

080206d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80206d0:	b480      	push	{r7}
 80206d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80206d4:	b672      	cpsid	i
}
 80206d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80206d8:	e7fe      	b.n	80206d8 <Error_Handler+0x8>
	...

080206dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80206dc:	b480      	push	{r7}
 80206de:	b083      	sub	sp, #12
 80206e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80206e2:	2300      	movs	r3, #0
 80206e4:	607b      	str	r3, [r7, #4]
 80206e6:	4b10      	ldr	r3, [pc, #64]	; (8020728 <HAL_MspInit+0x4c>)
 80206e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80206ea:	4a0f      	ldr	r2, [pc, #60]	; (8020728 <HAL_MspInit+0x4c>)
 80206ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80206f0:	6453      	str	r3, [r2, #68]	; 0x44
 80206f2:	4b0d      	ldr	r3, [pc, #52]	; (8020728 <HAL_MspInit+0x4c>)
 80206f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80206f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80206fa:	607b      	str	r3, [r7, #4]
 80206fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80206fe:	2300      	movs	r3, #0
 8020700:	603b      	str	r3, [r7, #0]
 8020702:	4b09      	ldr	r3, [pc, #36]	; (8020728 <HAL_MspInit+0x4c>)
 8020704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020706:	4a08      	ldr	r2, [pc, #32]	; (8020728 <HAL_MspInit+0x4c>)
 8020708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802070c:	6413      	str	r3, [r2, #64]	; 0x40
 802070e:	4b06      	ldr	r3, [pc, #24]	; (8020728 <HAL_MspInit+0x4c>)
 8020710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020716:	603b      	str	r3, [r7, #0]
 8020718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802071a:	bf00      	nop
 802071c:	370c      	adds	r7, #12
 802071e:	46bd      	mov	sp, r7
 8020720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020724:	4770      	bx	lr
 8020726:	bf00      	nop
 8020728:	40023800 	.word	0x40023800

0802072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802072c:	b480      	push	{r7}
 802072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020730:	e7fe      	b.n	8020730 <NMI_Handler+0x4>

08020732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020732:	b480      	push	{r7}
 8020734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020736:	e7fe      	b.n	8020736 <HardFault_Handler+0x4>

08020738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020738:	b480      	push	{r7}
 802073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802073c:	e7fe      	b.n	802073c <MemManage_Handler+0x4>

0802073e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802073e:	b480      	push	{r7}
 8020740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020742:	e7fe      	b.n	8020742 <BusFault_Handler+0x4>

08020744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020744:	b480      	push	{r7}
 8020746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020748:	e7fe      	b.n	8020748 <UsageFault_Handler+0x4>

0802074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802074a:	b480      	push	{r7}
 802074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802074e:	bf00      	nop
 8020750:	46bd      	mov	sp, r7
 8020752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020756:	4770      	bx	lr

08020758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020758:	b480      	push	{r7}
 802075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802075c:	bf00      	nop
 802075e:	46bd      	mov	sp, r7
 8020760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020764:	4770      	bx	lr

08020766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020766:	b480      	push	{r7}
 8020768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802076a:	bf00      	nop
 802076c:	46bd      	mov	sp, r7
 802076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020772:	4770      	bx	lr

08020774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020774:	b580      	push	{r7, lr}
 8020776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020778:	f000 f960 	bl	8020a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802077c:	bf00      	nop
 802077e:	bd80      	pop	{r7, pc}

08020780 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8020780:	b480      	push	{r7}
 8020782:	b083      	sub	sp, #12
 8020784:	af00      	add	r7, sp, #0
 8020786:	4603      	mov	r3, r0
 8020788:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA

	DEMCR |= ( 1 << 24);
 802078a:	4b0f      	ldr	r3, [pc, #60]	; (80207c8 <ITM_SendChar+0x48>)
 802078c:	681b      	ldr	r3, [r3, #0]
 802078e:	4a0e      	ldr	r2, [pc, #56]	; (80207c8 <ITM_SendChar+0x48>)
 8020790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8020794:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8020796:	4b0d      	ldr	r3, [pc, #52]	; (80207cc <ITM_SendChar+0x4c>)
 8020798:	681b      	ldr	r3, [r3, #0]
 802079a:	4a0c      	ldr	r2, [pc, #48]	; (80207cc <ITM_SendChar+0x4c>)
 802079c:	f043 0301 	orr.w	r3, r3, #1
 80207a0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80207a2:	bf00      	nop
 80207a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80207a8:	681b      	ldr	r3, [r3, #0]
 80207aa:	f003 0301 	and.w	r3, r3, #1
 80207ae:	2b00      	cmp	r3, #0
 80207b0:	d0f8      	beq.n	80207a4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80207b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80207b6:	79fb      	ldrb	r3, [r7, #7]
 80207b8:	6013      	str	r3, [r2, #0]
}
 80207ba:	bf00      	nop
 80207bc:	370c      	adds	r7, #12
 80207be:	46bd      	mov	sp, r7
 80207c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207c4:	4770      	bx	lr
 80207c6:	bf00      	nop
 80207c8:	e000edfc 	.word	0xe000edfc
 80207cc:	e0000e00 	.word	0xe0000e00

080207d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80207d0:	b580      	push	{r7, lr}
 80207d2:	b086      	sub	sp, #24
 80207d4:	af00      	add	r7, sp, #0
 80207d6:	60f8      	str	r0, [r7, #12]
 80207d8:	60b9      	str	r1, [r7, #8]
 80207da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80207dc:	2300      	movs	r3, #0
 80207de:	617b      	str	r3, [r7, #20]
 80207e0:	e00a      	b.n	80207f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80207e2:	f3af 8000 	nop.w
 80207e6:	4601      	mov	r1, r0
 80207e8:	68bb      	ldr	r3, [r7, #8]
 80207ea:	1c5a      	adds	r2, r3, #1
 80207ec:	60ba      	str	r2, [r7, #8]
 80207ee:	b2ca      	uxtb	r2, r1
 80207f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80207f2:	697b      	ldr	r3, [r7, #20]
 80207f4:	3301      	adds	r3, #1
 80207f6:	617b      	str	r3, [r7, #20]
 80207f8:	697a      	ldr	r2, [r7, #20]
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	429a      	cmp	r2, r3
 80207fe:	dbf0      	blt.n	80207e2 <_read+0x12>
	}

return len;
 8020800:	687b      	ldr	r3, [r7, #4]
}
 8020802:	4618      	mov	r0, r3
 8020804:	3718      	adds	r7, #24
 8020806:	46bd      	mov	sp, r7
 8020808:	bd80      	pop	{r7, pc}

0802080a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802080a:	b580      	push	{r7, lr}
 802080c:	b086      	sub	sp, #24
 802080e:	af00      	add	r7, sp, #0
 8020810:	60f8      	str	r0, [r7, #12]
 8020812:	60b9      	str	r1, [r7, #8]
 8020814:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020816:	2300      	movs	r3, #0
 8020818:	617b      	str	r3, [r7, #20]
 802081a:	e009      	b.n	8020830 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 802081c:	68bb      	ldr	r3, [r7, #8]
 802081e:	1c5a      	adds	r2, r3, #1
 8020820:	60ba      	str	r2, [r7, #8]
 8020822:	781b      	ldrb	r3, [r3, #0]
 8020824:	4618      	mov	r0, r3
 8020826:	f7ff ffab 	bl	8020780 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802082a:	697b      	ldr	r3, [r7, #20]
 802082c:	3301      	adds	r3, #1
 802082e:	617b      	str	r3, [r7, #20]
 8020830:	697a      	ldr	r2, [r7, #20]
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	429a      	cmp	r2, r3
 8020836:	dbf1      	blt.n	802081c <_write+0x12>
	}
	return len;
 8020838:	687b      	ldr	r3, [r7, #4]
}
 802083a:	4618      	mov	r0, r3
 802083c:	3718      	adds	r7, #24
 802083e:	46bd      	mov	sp, r7
 8020840:	bd80      	pop	{r7, pc}

08020842 <_close>:

int _close(int file)
{
 8020842:	b480      	push	{r7}
 8020844:	b083      	sub	sp, #12
 8020846:	af00      	add	r7, sp, #0
 8020848:	6078      	str	r0, [r7, #4]
	return -1;
 802084a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802084e:	4618      	mov	r0, r3
 8020850:	370c      	adds	r7, #12
 8020852:	46bd      	mov	sp, r7
 8020854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020858:	4770      	bx	lr

0802085a <_fstat>:


int _fstat(int file, struct stat *st)
{
 802085a:	b480      	push	{r7}
 802085c:	b083      	sub	sp, #12
 802085e:	af00      	add	r7, sp, #0
 8020860:	6078      	str	r0, [r7, #4]
 8020862:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8020864:	683b      	ldr	r3, [r7, #0]
 8020866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802086a:	605a      	str	r2, [r3, #4]
	return 0;
 802086c:	2300      	movs	r3, #0
}
 802086e:	4618      	mov	r0, r3
 8020870:	370c      	adds	r7, #12
 8020872:	46bd      	mov	sp, r7
 8020874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020878:	4770      	bx	lr

0802087a <_isatty>:

int _isatty(int file)
{
 802087a:	b480      	push	{r7}
 802087c:	b083      	sub	sp, #12
 802087e:	af00      	add	r7, sp, #0
 8020880:	6078      	str	r0, [r7, #4]
	return 1;
 8020882:	2301      	movs	r3, #1
}
 8020884:	4618      	mov	r0, r3
 8020886:	370c      	adds	r7, #12
 8020888:	46bd      	mov	sp, r7
 802088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802088e:	4770      	bx	lr

08020890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8020890:	b480      	push	{r7}
 8020892:	b085      	sub	sp, #20
 8020894:	af00      	add	r7, sp, #0
 8020896:	60f8      	str	r0, [r7, #12]
 8020898:	60b9      	str	r1, [r7, #8]
 802089a:	607a      	str	r2, [r7, #4]
	return 0;
 802089c:	2300      	movs	r3, #0
}
 802089e:	4618      	mov	r0, r3
 80208a0:	3714      	adds	r7, #20
 80208a2:	46bd      	mov	sp, r7
 80208a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208a8:	4770      	bx	lr
	...

080208ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80208ac:	b580      	push	{r7, lr}
 80208ae:	b086      	sub	sp, #24
 80208b0:	af00      	add	r7, sp, #0
 80208b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80208b4:	4a14      	ldr	r2, [pc, #80]	; (8020908 <_sbrk+0x5c>)
 80208b6:	4b15      	ldr	r3, [pc, #84]	; (802090c <_sbrk+0x60>)
 80208b8:	1ad3      	subs	r3, r2, r3
 80208ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80208bc:	697b      	ldr	r3, [r7, #20]
 80208be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80208c0:	4b13      	ldr	r3, [pc, #76]	; (8020910 <_sbrk+0x64>)
 80208c2:	681b      	ldr	r3, [r3, #0]
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	d102      	bne.n	80208ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80208c8:	4b11      	ldr	r3, [pc, #68]	; (8020910 <_sbrk+0x64>)
 80208ca:	4a12      	ldr	r2, [pc, #72]	; (8020914 <_sbrk+0x68>)
 80208cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80208ce:	4b10      	ldr	r3, [pc, #64]	; (8020910 <_sbrk+0x64>)
 80208d0:	681a      	ldr	r2, [r3, #0]
 80208d2:	687b      	ldr	r3, [r7, #4]
 80208d4:	4413      	add	r3, r2
 80208d6:	693a      	ldr	r2, [r7, #16]
 80208d8:	429a      	cmp	r2, r3
 80208da:	d207      	bcs.n	80208ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80208dc:	f000 ffcc 	bl	8021878 <__errno>
 80208e0:	4603      	mov	r3, r0
 80208e2:	220c      	movs	r2, #12
 80208e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80208e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80208ea:	e009      	b.n	8020900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80208ec:	4b08      	ldr	r3, [pc, #32]	; (8020910 <_sbrk+0x64>)
 80208ee:	681b      	ldr	r3, [r3, #0]
 80208f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80208f2:	4b07      	ldr	r3, [pc, #28]	; (8020910 <_sbrk+0x64>)
 80208f4:	681a      	ldr	r2, [r3, #0]
 80208f6:	687b      	ldr	r3, [r7, #4]
 80208f8:	4413      	add	r3, r2
 80208fa:	4a05      	ldr	r2, [pc, #20]	; (8020910 <_sbrk+0x64>)
 80208fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80208fe:	68fb      	ldr	r3, [r7, #12]
}
 8020900:	4618      	mov	r0, r3
 8020902:	3718      	adds	r7, #24
 8020904:	46bd      	mov	sp, r7
 8020906:	bd80      	pop	{r7, pc}
 8020908:	20020000 	.word	0x20020000
 802090c:	00000400 	.word	0x00000400
 8020910:	2000008c 	.word	0x2000008c
 8020914:	200000a8 	.word	0x200000a8

08020918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020918:	b480      	push	{r7}
 802091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802091c:	4b07      	ldr	r3, [pc, #28]	; (802093c <SystemInit+0x24>)
 802091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020922:	4a06      	ldr	r2, [pc, #24]	; (802093c <SystemInit+0x24>)
 8020924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 802092c:	4b03      	ldr	r3, [pc, #12]	; (802093c <SystemInit+0x24>)
 802092e:	4a04      	ldr	r2, [pc, #16]	; (8020940 <SystemInit+0x28>)
 8020930:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020932:	bf00      	nop
 8020934:	46bd      	mov	sp, r7
 8020936:	f85d 7b04 	ldr.w	r7, [sp], #4
 802093a:	4770      	bx	lr
 802093c:	e000ed00 	.word	0xe000ed00
 8020940:	08020000 	.word	0x08020000

08020944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8020944:	f8df d034 	ldr.w	sp, [pc, #52]	; 802097c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8020948:	480d      	ldr	r0, [pc, #52]	; (8020980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 802094a:	490e      	ldr	r1, [pc, #56]	; (8020984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 802094c:	4a0e      	ldr	r2, [pc, #56]	; (8020988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 802094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020950:	e002      	b.n	8020958 <LoopCopyDataInit>

08020952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020956:	3304      	adds	r3, #4

08020958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802095c:	d3f9      	bcc.n	8020952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802095e:	4a0b      	ldr	r2, [pc, #44]	; (802098c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8020960:	4c0b      	ldr	r4, [pc, #44]	; (8020990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8020962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020964:	e001      	b.n	802096a <LoopFillZerobss>

08020966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020968:	3204      	adds	r2, #4

0802096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802096c:	d3fb      	bcc.n	8020966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 802096e:	f7ff ffd3 	bl	8020918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020972:	f000 ff87 	bl	8021884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020976:	f7ff fdfd 	bl	8020574 <main>
  bx  lr    
 802097a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 802097c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8020980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020984:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8020988:	080228e8 	.word	0x080228e8
  ldr r2, =_sbss
 802098c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8020990:	200000a4 	.word	0x200000a4

08020994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020994:	e7fe      	b.n	8020994 <ADC_IRQHandler>
	...

08020998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020998:	b580      	push	{r7, lr}
 802099a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802099c:	4b0e      	ldr	r3, [pc, #56]	; (80209d8 <HAL_Init+0x40>)
 802099e:	681b      	ldr	r3, [r3, #0]
 80209a0:	4a0d      	ldr	r2, [pc, #52]	; (80209d8 <HAL_Init+0x40>)
 80209a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80209a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80209a8:	4b0b      	ldr	r3, [pc, #44]	; (80209d8 <HAL_Init+0x40>)
 80209aa:	681b      	ldr	r3, [r3, #0]
 80209ac:	4a0a      	ldr	r2, [pc, #40]	; (80209d8 <HAL_Init+0x40>)
 80209ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80209b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80209b4:	4b08      	ldr	r3, [pc, #32]	; (80209d8 <HAL_Init+0x40>)
 80209b6:	681b      	ldr	r3, [r3, #0]
 80209b8:	4a07      	ldr	r2, [pc, #28]	; (80209d8 <HAL_Init+0x40>)
 80209ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80209be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80209c0:	2003      	movs	r0, #3
 80209c2:	f000 f931 	bl	8020c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80209c6:	200f      	movs	r0, #15
 80209c8:	f000 f808 	bl	80209dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80209cc:	f7ff fe86 	bl	80206dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80209d0:	2300      	movs	r3, #0
}
 80209d2:	4618      	mov	r0, r3
 80209d4:	bd80      	pop	{r7, pc}
 80209d6:	bf00      	nop
 80209d8:	40023c00 	.word	0x40023c00

080209dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80209dc:	b580      	push	{r7, lr}
 80209de:	b082      	sub	sp, #8
 80209e0:	af00      	add	r7, sp, #0
 80209e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80209e4:	4b12      	ldr	r3, [pc, #72]	; (8020a30 <HAL_InitTick+0x54>)
 80209e6:	681a      	ldr	r2, [r3, #0]
 80209e8:	4b12      	ldr	r3, [pc, #72]	; (8020a34 <HAL_InitTick+0x58>)
 80209ea:	781b      	ldrb	r3, [r3, #0]
 80209ec:	4619      	mov	r1, r3
 80209ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80209f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80209f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80209fa:	4618      	mov	r0, r3
 80209fc:	f000 f93b 	bl	8020c76 <HAL_SYSTICK_Config>
 8020a00:	4603      	mov	r3, r0
 8020a02:	2b00      	cmp	r3, #0
 8020a04:	d001      	beq.n	8020a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020a06:	2301      	movs	r3, #1
 8020a08:	e00e      	b.n	8020a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020a0a:	687b      	ldr	r3, [r7, #4]
 8020a0c:	2b0f      	cmp	r3, #15
 8020a0e:	d80a      	bhi.n	8020a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020a10:	2200      	movs	r2, #0
 8020a12:	6879      	ldr	r1, [r7, #4]
 8020a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020a18:	f000 f911 	bl	8020c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020a1c:	4a06      	ldr	r2, [pc, #24]	; (8020a38 <HAL_InitTick+0x5c>)
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020a22:	2300      	movs	r3, #0
 8020a24:	e000      	b.n	8020a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020a26:	2301      	movs	r3, #1
}
 8020a28:	4618      	mov	r0, r3
 8020a2a:	3708      	adds	r7, #8
 8020a2c:	46bd      	mov	sp, r7
 8020a2e:	bd80      	pop	{r7, pc}
 8020a30:	20000000 	.word	0x20000000
 8020a34:	20000008 	.word	0x20000008
 8020a38:	20000004 	.word	0x20000004

08020a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020a3c:	b480      	push	{r7}
 8020a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020a40:	4b06      	ldr	r3, [pc, #24]	; (8020a5c <HAL_IncTick+0x20>)
 8020a42:	781b      	ldrb	r3, [r3, #0]
 8020a44:	461a      	mov	r2, r3
 8020a46:	4b06      	ldr	r3, [pc, #24]	; (8020a60 <HAL_IncTick+0x24>)
 8020a48:	681b      	ldr	r3, [r3, #0]
 8020a4a:	4413      	add	r3, r2
 8020a4c:	4a04      	ldr	r2, [pc, #16]	; (8020a60 <HAL_IncTick+0x24>)
 8020a4e:	6013      	str	r3, [r2, #0]
}
 8020a50:	bf00      	nop
 8020a52:	46bd      	mov	sp, r7
 8020a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a58:	4770      	bx	lr
 8020a5a:	bf00      	nop
 8020a5c:	20000008 	.word	0x20000008
 8020a60:	20000090 	.word	0x20000090

08020a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020a64:	b480      	push	{r7}
 8020a66:	af00      	add	r7, sp, #0
  return uwTick;
 8020a68:	4b03      	ldr	r3, [pc, #12]	; (8020a78 <HAL_GetTick+0x14>)
 8020a6a:	681b      	ldr	r3, [r3, #0]
}
 8020a6c:	4618      	mov	r0, r3
 8020a6e:	46bd      	mov	sp, r7
 8020a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a74:	4770      	bx	lr
 8020a76:	bf00      	nop
 8020a78:	20000090 	.word	0x20000090

08020a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020a7c:	b580      	push	{r7, lr}
 8020a7e:	b084      	sub	sp, #16
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020a84:	f7ff ffee 	bl	8020a64 <HAL_GetTick>
 8020a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020a8e:	68fb      	ldr	r3, [r7, #12]
 8020a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020a94:	d005      	beq.n	8020aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8020a96:	4b0a      	ldr	r3, [pc, #40]	; (8020ac0 <HAL_Delay+0x44>)
 8020a98:	781b      	ldrb	r3, [r3, #0]
 8020a9a:	461a      	mov	r2, r3
 8020a9c:	68fb      	ldr	r3, [r7, #12]
 8020a9e:	4413      	add	r3, r2
 8020aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8020aa2:	bf00      	nop
 8020aa4:	f7ff ffde 	bl	8020a64 <HAL_GetTick>
 8020aa8:	4602      	mov	r2, r0
 8020aaa:	68bb      	ldr	r3, [r7, #8]
 8020aac:	1ad3      	subs	r3, r2, r3
 8020aae:	68fa      	ldr	r2, [r7, #12]
 8020ab0:	429a      	cmp	r2, r3
 8020ab2:	d8f7      	bhi.n	8020aa4 <HAL_Delay+0x28>
  {
  }
}
 8020ab4:	bf00      	nop
 8020ab6:	bf00      	nop
 8020ab8:	3710      	adds	r7, #16
 8020aba:	46bd      	mov	sp, r7
 8020abc:	bd80      	pop	{r7, pc}
 8020abe:	bf00      	nop
 8020ac0:	20000008 	.word	0x20000008

08020ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020ac4:	b480      	push	{r7}
 8020ac6:	b085      	sub	sp, #20
 8020ac8:	af00      	add	r7, sp, #0
 8020aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	f003 0307 	and.w	r3, r3, #7
 8020ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020ad4:	4b0c      	ldr	r3, [pc, #48]	; (8020b08 <__NVIC_SetPriorityGrouping+0x44>)
 8020ad6:	68db      	ldr	r3, [r3, #12]
 8020ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020ada:	68ba      	ldr	r2, [r7, #8]
 8020adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020ae0:	4013      	ands	r3, r2
 8020ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020ae4:	68fb      	ldr	r3, [r7, #12]
 8020ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020ae8:	68bb      	ldr	r3, [r7, #8]
 8020aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020af6:	4a04      	ldr	r2, [pc, #16]	; (8020b08 <__NVIC_SetPriorityGrouping+0x44>)
 8020af8:	68bb      	ldr	r3, [r7, #8]
 8020afa:	60d3      	str	r3, [r2, #12]
}
 8020afc:	bf00      	nop
 8020afe:	3714      	adds	r7, #20
 8020b00:	46bd      	mov	sp, r7
 8020b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b06:	4770      	bx	lr
 8020b08:	e000ed00 	.word	0xe000ed00

08020b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020b0c:	b480      	push	{r7}
 8020b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020b10:	4b04      	ldr	r3, [pc, #16]	; (8020b24 <__NVIC_GetPriorityGrouping+0x18>)
 8020b12:	68db      	ldr	r3, [r3, #12]
 8020b14:	0a1b      	lsrs	r3, r3, #8
 8020b16:	f003 0307 	and.w	r3, r3, #7
}
 8020b1a:	4618      	mov	r0, r3
 8020b1c:	46bd      	mov	sp, r7
 8020b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b22:	4770      	bx	lr
 8020b24:	e000ed00 	.word	0xe000ed00

08020b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020b28:	b480      	push	{r7}
 8020b2a:	b083      	sub	sp, #12
 8020b2c:	af00      	add	r7, sp, #0
 8020b2e:	4603      	mov	r3, r0
 8020b30:	6039      	str	r1, [r7, #0]
 8020b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	db0a      	blt.n	8020b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020b3c:	683b      	ldr	r3, [r7, #0]
 8020b3e:	b2da      	uxtb	r2, r3
 8020b40:	490c      	ldr	r1, [pc, #48]	; (8020b74 <__NVIC_SetPriority+0x4c>)
 8020b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020b46:	0112      	lsls	r2, r2, #4
 8020b48:	b2d2      	uxtb	r2, r2
 8020b4a:	440b      	add	r3, r1
 8020b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020b50:	e00a      	b.n	8020b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020b52:	683b      	ldr	r3, [r7, #0]
 8020b54:	b2da      	uxtb	r2, r3
 8020b56:	4908      	ldr	r1, [pc, #32]	; (8020b78 <__NVIC_SetPriority+0x50>)
 8020b58:	79fb      	ldrb	r3, [r7, #7]
 8020b5a:	f003 030f 	and.w	r3, r3, #15
 8020b5e:	3b04      	subs	r3, #4
 8020b60:	0112      	lsls	r2, r2, #4
 8020b62:	b2d2      	uxtb	r2, r2
 8020b64:	440b      	add	r3, r1
 8020b66:	761a      	strb	r2, [r3, #24]
}
 8020b68:	bf00      	nop
 8020b6a:	370c      	adds	r7, #12
 8020b6c:	46bd      	mov	sp, r7
 8020b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b72:	4770      	bx	lr
 8020b74:	e000e100 	.word	0xe000e100
 8020b78:	e000ed00 	.word	0xe000ed00

08020b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020b7c:	b480      	push	{r7}
 8020b7e:	b089      	sub	sp, #36	; 0x24
 8020b80:	af00      	add	r7, sp, #0
 8020b82:	60f8      	str	r0, [r7, #12]
 8020b84:	60b9      	str	r1, [r7, #8]
 8020b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020b88:	68fb      	ldr	r3, [r7, #12]
 8020b8a:	f003 0307 	and.w	r3, r3, #7
 8020b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020b90:	69fb      	ldr	r3, [r7, #28]
 8020b92:	f1c3 0307 	rsb	r3, r3, #7
 8020b96:	2b04      	cmp	r3, #4
 8020b98:	bf28      	it	cs
 8020b9a:	2304      	movcs	r3, #4
 8020b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020b9e:	69fb      	ldr	r3, [r7, #28]
 8020ba0:	3304      	adds	r3, #4
 8020ba2:	2b06      	cmp	r3, #6
 8020ba4:	d902      	bls.n	8020bac <NVIC_EncodePriority+0x30>
 8020ba6:	69fb      	ldr	r3, [r7, #28]
 8020ba8:	3b03      	subs	r3, #3
 8020baa:	e000      	b.n	8020bae <NVIC_EncodePriority+0x32>
 8020bac:	2300      	movs	r3, #0
 8020bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020bb4:	69bb      	ldr	r3, [r7, #24]
 8020bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8020bba:	43da      	mvns	r2, r3
 8020bbc:	68bb      	ldr	r3, [r7, #8]
 8020bbe:	401a      	ands	r2, r3
 8020bc0:	697b      	ldr	r3, [r7, #20]
 8020bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020bc8:	697b      	ldr	r3, [r7, #20]
 8020bca:	fa01 f303 	lsl.w	r3, r1, r3
 8020bce:	43d9      	mvns	r1, r3
 8020bd0:	687b      	ldr	r3, [r7, #4]
 8020bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020bd4:	4313      	orrs	r3, r2
         );
}
 8020bd6:	4618      	mov	r0, r3
 8020bd8:	3724      	adds	r7, #36	; 0x24
 8020bda:	46bd      	mov	sp, r7
 8020bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020be0:	4770      	bx	lr
	...

08020be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020be4:	b580      	push	{r7, lr}
 8020be6:	b082      	sub	sp, #8
 8020be8:	af00      	add	r7, sp, #0
 8020bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	3b01      	subs	r3, #1
 8020bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020bf4:	d301      	bcc.n	8020bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020bf6:	2301      	movs	r3, #1
 8020bf8:	e00f      	b.n	8020c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020bfa:	4a0a      	ldr	r2, [pc, #40]	; (8020c24 <SysTick_Config+0x40>)
 8020bfc:	687b      	ldr	r3, [r7, #4]
 8020bfe:	3b01      	subs	r3, #1
 8020c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020c02:	210f      	movs	r1, #15
 8020c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020c08:	f7ff ff8e 	bl	8020b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020c0c:	4b05      	ldr	r3, [pc, #20]	; (8020c24 <SysTick_Config+0x40>)
 8020c0e:	2200      	movs	r2, #0
 8020c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020c12:	4b04      	ldr	r3, [pc, #16]	; (8020c24 <SysTick_Config+0x40>)
 8020c14:	2207      	movs	r2, #7
 8020c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020c18:	2300      	movs	r3, #0
}
 8020c1a:	4618      	mov	r0, r3
 8020c1c:	3708      	adds	r7, #8
 8020c1e:	46bd      	mov	sp, r7
 8020c20:	bd80      	pop	{r7, pc}
 8020c22:	bf00      	nop
 8020c24:	e000e010 	.word	0xe000e010

08020c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020c28:	b580      	push	{r7, lr}
 8020c2a:	b082      	sub	sp, #8
 8020c2c:	af00      	add	r7, sp, #0
 8020c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020c30:	6878      	ldr	r0, [r7, #4]
 8020c32:	f7ff ff47 	bl	8020ac4 <__NVIC_SetPriorityGrouping>
}
 8020c36:	bf00      	nop
 8020c38:	3708      	adds	r7, #8
 8020c3a:	46bd      	mov	sp, r7
 8020c3c:	bd80      	pop	{r7, pc}

08020c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020c3e:	b580      	push	{r7, lr}
 8020c40:	b086      	sub	sp, #24
 8020c42:	af00      	add	r7, sp, #0
 8020c44:	4603      	mov	r3, r0
 8020c46:	60b9      	str	r1, [r7, #8]
 8020c48:	607a      	str	r2, [r7, #4]
 8020c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020c4c:	2300      	movs	r3, #0
 8020c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020c50:	f7ff ff5c 	bl	8020b0c <__NVIC_GetPriorityGrouping>
 8020c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020c56:	687a      	ldr	r2, [r7, #4]
 8020c58:	68b9      	ldr	r1, [r7, #8]
 8020c5a:	6978      	ldr	r0, [r7, #20]
 8020c5c:	f7ff ff8e 	bl	8020b7c <NVIC_EncodePriority>
 8020c60:	4602      	mov	r2, r0
 8020c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020c66:	4611      	mov	r1, r2
 8020c68:	4618      	mov	r0, r3
 8020c6a:	f7ff ff5d 	bl	8020b28 <__NVIC_SetPriority>
}
 8020c6e:	bf00      	nop
 8020c70:	3718      	adds	r7, #24
 8020c72:	46bd      	mov	sp, r7
 8020c74:	bd80      	pop	{r7, pc}

08020c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020c76:	b580      	push	{r7, lr}
 8020c78:	b082      	sub	sp, #8
 8020c7a:	af00      	add	r7, sp, #0
 8020c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020c7e:	6878      	ldr	r0, [r7, #4]
 8020c80:	f7ff ffb0 	bl	8020be4 <SysTick_Config>
 8020c84:	4603      	mov	r3, r0
}
 8020c86:	4618      	mov	r0, r3
 8020c88:	3708      	adds	r7, #8
 8020c8a:	46bd      	mov	sp, r7
 8020c8c:	bd80      	pop	{r7, pc}
	...

08020c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020c90:	b480      	push	{r7}
 8020c92:	b089      	sub	sp, #36	; 0x24
 8020c94:	af00      	add	r7, sp, #0
 8020c96:	6078      	str	r0, [r7, #4]
 8020c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8020c9a:	2300      	movs	r3, #0
 8020c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8020c9e:	2300      	movs	r3, #0
 8020ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8020ca2:	2300      	movs	r3, #0
 8020ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	61fb      	str	r3, [r7, #28]
 8020caa:	e16b      	b.n	8020f84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8020cac:	2201      	movs	r2, #1
 8020cae:	69fb      	ldr	r3, [r7, #28]
 8020cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8020cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8020cb6:	683b      	ldr	r3, [r7, #0]
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	697a      	ldr	r2, [r7, #20]
 8020cbc:	4013      	ands	r3, r2
 8020cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8020cc0:	693a      	ldr	r2, [r7, #16]
 8020cc2:	697b      	ldr	r3, [r7, #20]
 8020cc4:	429a      	cmp	r2, r3
 8020cc6:	f040 815a 	bne.w	8020f7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020cca:	683b      	ldr	r3, [r7, #0]
 8020ccc:	685b      	ldr	r3, [r3, #4]
 8020cce:	f003 0303 	and.w	r3, r3, #3
 8020cd2:	2b01      	cmp	r3, #1
 8020cd4:	d005      	beq.n	8020ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020cd6:	683b      	ldr	r3, [r7, #0]
 8020cd8:	685b      	ldr	r3, [r3, #4]
 8020cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020cde:	2b02      	cmp	r3, #2
 8020ce0:	d130      	bne.n	8020d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8020ce2:	687b      	ldr	r3, [r7, #4]
 8020ce4:	689b      	ldr	r3, [r3, #8]
 8020ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8020ce8:	69fb      	ldr	r3, [r7, #28]
 8020cea:	005b      	lsls	r3, r3, #1
 8020cec:	2203      	movs	r2, #3
 8020cee:	fa02 f303 	lsl.w	r3, r2, r3
 8020cf2:	43db      	mvns	r3, r3
 8020cf4:	69ba      	ldr	r2, [r7, #24]
 8020cf6:	4013      	ands	r3, r2
 8020cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8020cfa:	683b      	ldr	r3, [r7, #0]
 8020cfc:	68da      	ldr	r2, [r3, #12]
 8020cfe:	69fb      	ldr	r3, [r7, #28]
 8020d00:	005b      	lsls	r3, r3, #1
 8020d02:	fa02 f303 	lsl.w	r3, r2, r3
 8020d06:	69ba      	ldr	r2, [r7, #24]
 8020d08:	4313      	orrs	r3, r2
 8020d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8020d0c:	687b      	ldr	r3, [r7, #4]
 8020d0e:	69ba      	ldr	r2, [r7, #24]
 8020d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8020d12:	687b      	ldr	r3, [r7, #4]
 8020d14:	685b      	ldr	r3, [r3, #4]
 8020d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8020d18:	2201      	movs	r2, #1
 8020d1a:	69fb      	ldr	r3, [r7, #28]
 8020d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8020d20:	43db      	mvns	r3, r3
 8020d22:	69ba      	ldr	r2, [r7, #24]
 8020d24:	4013      	ands	r3, r2
 8020d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8020d28:	683b      	ldr	r3, [r7, #0]
 8020d2a:	685b      	ldr	r3, [r3, #4]
 8020d2c:	091b      	lsrs	r3, r3, #4
 8020d2e:	f003 0201 	and.w	r2, r3, #1
 8020d32:	69fb      	ldr	r3, [r7, #28]
 8020d34:	fa02 f303 	lsl.w	r3, r2, r3
 8020d38:	69ba      	ldr	r2, [r7, #24]
 8020d3a:	4313      	orrs	r3, r2
 8020d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8020d3e:	687b      	ldr	r3, [r7, #4]
 8020d40:	69ba      	ldr	r2, [r7, #24]
 8020d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8020d44:	683b      	ldr	r3, [r7, #0]
 8020d46:	685b      	ldr	r3, [r3, #4]
 8020d48:	f003 0303 	and.w	r3, r3, #3
 8020d4c:	2b03      	cmp	r3, #3
 8020d4e:	d017      	beq.n	8020d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8020d50:	687b      	ldr	r3, [r7, #4]
 8020d52:	68db      	ldr	r3, [r3, #12]
 8020d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8020d56:	69fb      	ldr	r3, [r7, #28]
 8020d58:	005b      	lsls	r3, r3, #1
 8020d5a:	2203      	movs	r2, #3
 8020d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8020d60:	43db      	mvns	r3, r3
 8020d62:	69ba      	ldr	r2, [r7, #24]
 8020d64:	4013      	ands	r3, r2
 8020d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8020d68:	683b      	ldr	r3, [r7, #0]
 8020d6a:	689a      	ldr	r2, [r3, #8]
 8020d6c:	69fb      	ldr	r3, [r7, #28]
 8020d6e:	005b      	lsls	r3, r3, #1
 8020d70:	fa02 f303 	lsl.w	r3, r2, r3
 8020d74:	69ba      	ldr	r2, [r7, #24]
 8020d76:	4313      	orrs	r3, r2
 8020d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	69ba      	ldr	r2, [r7, #24]
 8020d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020d80:	683b      	ldr	r3, [r7, #0]
 8020d82:	685b      	ldr	r3, [r3, #4]
 8020d84:	f003 0303 	and.w	r3, r3, #3
 8020d88:	2b02      	cmp	r3, #2
 8020d8a:	d123      	bne.n	8020dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8020d8c:	69fb      	ldr	r3, [r7, #28]
 8020d8e:	08da      	lsrs	r2, r3, #3
 8020d90:	687b      	ldr	r3, [r7, #4]
 8020d92:	3208      	adds	r2, #8
 8020d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8020d9a:	69fb      	ldr	r3, [r7, #28]
 8020d9c:	f003 0307 	and.w	r3, r3, #7
 8020da0:	009b      	lsls	r3, r3, #2
 8020da2:	220f      	movs	r2, #15
 8020da4:	fa02 f303 	lsl.w	r3, r2, r3
 8020da8:	43db      	mvns	r3, r3
 8020daa:	69ba      	ldr	r2, [r7, #24]
 8020dac:	4013      	ands	r3, r2
 8020dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8020db0:	683b      	ldr	r3, [r7, #0]
 8020db2:	691a      	ldr	r2, [r3, #16]
 8020db4:	69fb      	ldr	r3, [r7, #28]
 8020db6:	f003 0307 	and.w	r3, r3, #7
 8020dba:	009b      	lsls	r3, r3, #2
 8020dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8020dc0:	69ba      	ldr	r2, [r7, #24]
 8020dc2:	4313      	orrs	r3, r2
 8020dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8020dc6:	69fb      	ldr	r3, [r7, #28]
 8020dc8:	08da      	lsrs	r2, r3, #3
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	3208      	adds	r2, #8
 8020dce:	69b9      	ldr	r1, [r7, #24]
 8020dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	681b      	ldr	r3, [r3, #0]
 8020dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8020dda:	69fb      	ldr	r3, [r7, #28]
 8020ddc:	005b      	lsls	r3, r3, #1
 8020dde:	2203      	movs	r2, #3
 8020de0:	fa02 f303 	lsl.w	r3, r2, r3
 8020de4:	43db      	mvns	r3, r3
 8020de6:	69ba      	ldr	r2, [r7, #24]
 8020de8:	4013      	ands	r3, r2
 8020dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020dec:	683b      	ldr	r3, [r7, #0]
 8020dee:	685b      	ldr	r3, [r3, #4]
 8020df0:	f003 0203 	and.w	r2, r3, #3
 8020df4:	69fb      	ldr	r3, [r7, #28]
 8020df6:	005b      	lsls	r3, r3, #1
 8020df8:	fa02 f303 	lsl.w	r3, r2, r3
 8020dfc:	69ba      	ldr	r2, [r7, #24]
 8020dfe:	4313      	orrs	r3, r2
 8020e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	69ba      	ldr	r2, [r7, #24]
 8020e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8020e08:	683b      	ldr	r3, [r7, #0]
 8020e0a:	685b      	ldr	r3, [r3, #4]
 8020e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	f000 80b4 	beq.w	8020f7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020e16:	2300      	movs	r3, #0
 8020e18:	60fb      	str	r3, [r7, #12]
 8020e1a:	4b60      	ldr	r3, [pc, #384]	; (8020f9c <HAL_GPIO_Init+0x30c>)
 8020e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020e1e:	4a5f      	ldr	r2, [pc, #380]	; (8020f9c <HAL_GPIO_Init+0x30c>)
 8020e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020e24:	6453      	str	r3, [r2, #68]	; 0x44
 8020e26:	4b5d      	ldr	r3, [pc, #372]	; (8020f9c <HAL_GPIO_Init+0x30c>)
 8020e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020e2e:	60fb      	str	r3, [r7, #12]
 8020e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8020e32:	4a5b      	ldr	r2, [pc, #364]	; (8020fa0 <HAL_GPIO_Init+0x310>)
 8020e34:	69fb      	ldr	r3, [r7, #28]
 8020e36:	089b      	lsrs	r3, r3, #2
 8020e38:	3302      	adds	r3, #2
 8020e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8020e40:	69fb      	ldr	r3, [r7, #28]
 8020e42:	f003 0303 	and.w	r3, r3, #3
 8020e46:	009b      	lsls	r3, r3, #2
 8020e48:	220f      	movs	r2, #15
 8020e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8020e4e:	43db      	mvns	r3, r3
 8020e50:	69ba      	ldr	r2, [r7, #24]
 8020e52:	4013      	ands	r3, r2
 8020e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	4a52      	ldr	r2, [pc, #328]	; (8020fa4 <HAL_GPIO_Init+0x314>)
 8020e5a:	4293      	cmp	r3, r2
 8020e5c:	d02b      	beq.n	8020eb6 <HAL_GPIO_Init+0x226>
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	4a51      	ldr	r2, [pc, #324]	; (8020fa8 <HAL_GPIO_Init+0x318>)
 8020e62:	4293      	cmp	r3, r2
 8020e64:	d025      	beq.n	8020eb2 <HAL_GPIO_Init+0x222>
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	4a50      	ldr	r2, [pc, #320]	; (8020fac <HAL_GPIO_Init+0x31c>)
 8020e6a:	4293      	cmp	r3, r2
 8020e6c:	d01f      	beq.n	8020eae <HAL_GPIO_Init+0x21e>
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	4a4f      	ldr	r2, [pc, #316]	; (8020fb0 <HAL_GPIO_Init+0x320>)
 8020e72:	4293      	cmp	r3, r2
 8020e74:	d019      	beq.n	8020eaa <HAL_GPIO_Init+0x21a>
 8020e76:	687b      	ldr	r3, [r7, #4]
 8020e78:	4a4e      	ldr	r2, [pc, #312]	; (8020fb4 <HAL_GPIO_Init+0x324>)
 8020e7a:	4293      	cmp	r3, r2
 8020e7c:	d013      	beq.n	8020ea6 <HAL_GPIO_Init+0x216>
 8020e7e:	687b      	ldr	r3, [r7, #4]
 8020e80:	4a4d      	ldr	r2, [pc, #308]	; (8020fb8 <HAL_GPIO_Init+0x328>)
 8020e82:	4293      	cmp	r3, r2
 8020e84:	d00d      	beq.n	8020ea2 <HAL_GPIO_Init+0x212>
 8020e86:	687b      	ldr	r3, [r7, #4]
 8020e88:	4a4c      	ldr	r2, [pc, #304]	; (8020fbc <HAL_GPIO_Init+0x32c>)
 8020e8a:	4293      	cmp	r3, r2
 8020e8c:	d007      	beq.n	8020e9e <HAL_GPIO_Init+0x20e>
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	4a4b      	ldr	r2, [pc, #300]	; (8020fc0 <HAL_GPIO_Init+0x330>)
 8020e92:	4293      	cmp	r3, r2
 8020e94:	d101      	bne.n	8020e9a <HAL_GPIO_Init+0x20a>
 8020e96:	2307      	movs	r3, #7
 8020e98:	e00e      	b.n	8020eb8 <HAL_GPIO_Init+0x228>
 8020e9a:	2308      	movs	r3, #8
 8020e9c:	e00c      	b.n	8020eb8 <HAL_GPIO_Init+0x228>
 8020e9e:	2306      	movs	r3, #6
 8020ea0:	e00a      	b.n	8020eb8 <HAL_GPIO_Init+0x228>
 8020ea2:	2305      	movs	r3, #5
 8020ea4:	e008      	b.n	8020eb8 <HAL_GPIO_Init+0x228>
 8020ea6:	2304      	movs	r3, #4
 8020ea8:	e006      	b.n	8020eb8 <HAL_GPIO_Init+0x228>
 8020eaa:	2303      	movs	r3, #3
 8020eac:	e004      	b.n	8020eb8 <HAL_GPIO_Init+0x228>
 8020eae:	2302      	movs	r3, #2
 8020eb0:	e002      	b.n	8020eb8 <HAL_GPIO_Init+0x228>
 8020eb2:	2301      	movs	r3, #1
 8020eb4:	e000      	b.n	8020eb8 <HAL_GPIO_Init+0x228>
 8020eb6:	2300      	movs	r3, #0
 8020eb8:	69fa      	ldr	r2, [r7, #28]
 8020eba:	f002 0203 	and.w	r2, r2, #3
 8020ebe:	0092      	lsls	r2, r2, #2
 8020ec0:	4093      	lsls	r3, r2
 8020ec2:	69ba      	ldr	r2, [r7, #24]
 8020ec4:	4313      	orrs	r3, r2
 8020ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8020ec8:	4935      	ldr	r1, [pc, #212]	; (8020fa0 <HAL_GPIO_Init+0x310>)
 8020eca:	69fb      	ldr	r3, [r7, #28]
 8020ecc:	089b      	lsrs	r3, r3, #2
 8020ece:	3302      	adds	r3, #2
 8020ed0:	69ba      	ldr	r2, [r7, #24]
 8020ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8020ed6:	4b3b      	ldr	r3, [pc, #236]	; (8020fc4 <HAL_GPIO_Init+0x334>)
 8020ed8:	689b      	ldr	r3, [r3, #8]
 8020eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020edc:	693b      	ldr	r3, [r7, #16]
 8020ede:	43db      	mvns	r3, r3
 8020ee0:	69ba      	ldr	r2, [r7, #24]
 8020ee2:	4013      	ands	r3, r2
 8020ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8020ee6:	683b      	ldr	r3, [r7, #0]
 8020ee8:	685b      	ldr	r3, [r3, #4]
 8020eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	d003      	beq.n	8020efa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8020ef2:	69ba      	ldr	r2, [r7, #24]
 8020ef4:	693b      	ldr	r3, [r7, #16]
 8020ef6:	4313      	orrs	r3, r2
 8020ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8020efa:	4a32      	ldr	r2, [pc, #200]	; (8020fc4 <HAL_GPIO_Init+0x334>)
 8020efc:	69bb      	ldr	r3, [r7, #24]
 8020efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8020f00:	4b30      	ldr	r3, [pc, #192]	; (8020fc4 <HAL_GPIO_Init+0x334>)
 8020f02:	68db      	ldr	r3, [r3, #12]
 8020f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020f06:	693b      	ldr	r3, [r7, #16]
 8020f08:	43db      	mvns	r3, r3
 8020f0a:	69ba      	ldr	r2, [r7, #24]
 8020f0c:	4013      	ands	r3, r2
 8020f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8020f10:	683b      	ldr	r3, [r7, #0]
 8020f12:	685b      	ldr	r3, [r3, #4]
 8020f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	d003      	beq.n	8020f24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8020f1c:	69ba      	ldr	r2, [r7, #24]
 8020f1e:	693b      	ldr	r3, [r7, #16]
 8020f20:	4313      	orrs	r3, r2
 8020f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8020f24:	4a27      	ldr	r2, [pc, #156]	; (8020fc4 <HAL_GPIO_Init+0x334>)
 8020f26:	69bb      	ldr	r3, [r7, #24]
 8020f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8020f2a:	4b26      	ldr	r3, [pc, #152]	; (8020fc4 <HAL_GPIO_Init+0x334>)
 8020f2c:	685b      	ldr	r3, [r3, #4]
 8020f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020f30:	693b      	ldr	r3, [r7, #16]
 8020f32:	43db      	mvns	r3, r3
 8020f34:	69ba      	ldr	r2, [r7, #24]
 8020f36:	4013      	ands	r3, r2
 8020f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8020f3a:	683b      	ldr	r3, [r7, #0]
 8020f3c:	685b      	ldr	r3, [r3, #4]
 8020f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d003      	beq.n	8020f4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8020f46:	69ba      	ldr	r2, [r7, #24]
 8020f48:	693b      	ldr	r3, [r7, #16]
 8020f4a:	4313      	orrs	r3, r2
 8020f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8020f4e:	4a1d      	ldr	r2, [pc, #116]	; (8020fc4 <HAL_GPIO_Init+0x334>)
 8020f50:	69bb      	ldr	r3, [r7, #24]
 8020f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8020f54:	4b1b      	ldr	r3, [pc, #108]	; (8020fc4 <HAL_GPIO_Init+0x334>)
 8020f56:	681b      	ldr	r3, [r3, #0]
 8020f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020f5a:	693b      	ldr	r3, [r7, #16]
 8020f5c:	43db      	mvns	r3, r3
 8020f5e:	69ba      	ldr	r2, [r7, #24]
 8020f60:	4013      	ands	r3, r2
 8020f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8020f64:	683b      	ldr	r3, [r7, #0]
 8020f66:	685b      	ldr	r3, [r3, #4]
 8020f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020f6c:	2b00      	cmp	r3, #0
 8020f6e:	d003      	beq.n	8020f78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8020f70:	69ba      	ldr	r2, [r7, #24]
 8020f72:	693b      	ldr	r3, [r7, #16]
 8020f74:	4313      	orrs	r3, r2
 8020f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8020f78:	4a12      	ldr	r2, [pc, #72]	; (8020fc4 <HAL_GPIO_Init+0x334>)
 8020f7a:	69bb      	ldr	r3, [r7, #24]
 8020f7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020f7e:	69fb      	ldr	r3, [r7, #28]
 8020f80:	3301      	adds	r3, #1
 8020f82:	61fb      	str	r3, [r7, #28]
 8020f84:	69fb      	ldr	r3, [r7, #28]
 8020f86:	2b0f      	cmp	r3, #15
 8020f88:	f67f ae90 	bls.w	8020cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8020f8c:	bf00      	nop
 8020f8e:	bf00      	nop
 8020f90:	3724      	adds	r7, #36	; 0x24
 8020f92:	46bd      	mov	sp, r7
 8020f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f98:	4770      	bx	lr
 8020f9a:	bf00      	nop
 8020f9c:	40023800 	.word	0x40023800
 8020fa0:	40013800 	.word	0x40013800
 8020fa4:	40020000 	.word	0x40020000
 8020fa8:	40020400 	.word	0x40020400
 8020fac:	40020800 	.word	0x40020800
 8020fb0:	40020c00 	.word	0x40020c00
 8020fb4:	40021000 	.word	0x40021000
 8020fb8:	40021400 	.word	0x40021400
 8020fbc:	40021800 	.word	0x40021800
 8020fc0:	40021c00 	.word	0x40021c00
 8020fc4:	40013c00 	.word	0x40013c00

08020fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8020fc8:	b480      	push	{r7}
 8020fca:	b083      	sub	sp, #12
 8020fcc:	af00      	add	r7, sp, #0
 8020fce:	6078      	str	r0, [r7, #4]
 8020fd0:	460b      	mov	r3, r1
 8020fd2:	807b      	strh	r3, [r7, #2]
 8020fd4:	4613      	mov	r3, r2
 8020fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8020fd8:	787b      	ldrb	r3, [r7, #1]
 8020fda:	2b00      	cmp	r3, #0
 8020fdc:	d003      	beq.n	8020fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8020fde:	887a      	ldrh	r2, [r7, #2]
 8020fe0:	687b      	ldr	r3, [r7, #4]
 8020fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8020fe4:	e003      	b.n	8020fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8020fe6:	887b      	ldrh	r3, [r7, #2]
 8020fe8:	041a      	lsls	r2, r3, #16
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	619a      	str	r2, [r3, #24]
}
 8020fee:	bf00      	nop
 8020ff0:	370c      	adds	r7, #12
 8020ff2:	46bd      	mov	sp, r7
 8020ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ff8:	4770      	bx	lr

08020ffa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8020ffa:	b480      	push	{r7}
 8020ffc:	b085      	sub	sp, #20
 8020ffe:	af00      	add	r7, sp, #0
 8021000:	6078      	str	r0, [r7, #4]
 8021002:	460b      	mov	r3, r1
 8021004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	695b      	ldr	r3, [r3, #20]
 802100a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 802100c:	887a      	ldrh	r2, [r7, #2]
 802100e:	68fb      	ldr	r3, [r7, #12]
 8021010:	4013      	ands	r3, r2
 8021012:	041a      	lsls	r2, r3, #16
 8021014:	68fb      	ldr	r3, [r7, #12]
 8021016:	43d9      	mvns	r1, r3
 8021018:	887b      	ldrh	r3, [r7, #2]
 802101a:	400b      	ands	r3, r1
 802101c:	431a      	orrs	r2, r3
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	619a      	str	r2, [r3, #24]
}
 8021022:	bf00      	nop
 8021024:	3714      	adds	r7, #20
 8021026:	46bd      	mov	sp, r7
 8021028:	f85d 7b04 	ldr.w	r7, [sp], #4
 802102c:	4770      	bx	lr
	...

08021030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021030:	b580      	push	{r7, lr}
 8021032:	b086      	sub	sp, #24
 8021034:	af00      	add	r7, sp, #0
 8021036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	2b00      	cmp	r3, #0
 802103c:	d101      	bne.n	8021042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802103e:	2301      	movs	r3, #1
 8021040:	e267      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	681b      	ldr	r3, [r3, #0]
 8021046:	f003 0301 	and.w	r3, r3, #1
 802104a:	2b00      	cmp	r3, #0
 802104c:	d075      	beq.n	802113a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802104e:	4b88      	ldr	r3, [pc, #544]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021050:	689b      	ldr	r3, [r3, #8]
 8021052:	f003 030c 	and.w	r3, r3, #12
 8021056:	2b04      	cmp	r3, #4
 8021058:	d00c      	beq.n	8021074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802105a:	4b85      	ldr	r3, [pc, #532]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 802105c:	689b      	ldr	r3, [r3, #8]
 802105e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8021062:	2b08      	cmp	r3, #8
 8021064:	d112      	bne.n	802108c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021066:	4b82      	ldr	r3, [pc, #520]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021068:	685b      	ldr	r3, [r3, #4]
 802106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802106e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8021072:	d10b      	bne.n	802108c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021074:	4b7e      	ldr	r3, [pc, #504]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802107c:	2b00      	cmp	r3, #0
 802107e:	d05b      	beq.n	8021138 <HAL_RCC_OscConfig+0x108>
 8021080:	687b      	ldr	r3, [r7, #4]
 8021082:	685b      	ldr	r3, [r3, #4]
 8021084:	2b00      	cmp	r3, #0
 8021086:	d157      	bne.n	8021138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8021088:	2301      	movs	r3, #1
 802108a:	e242      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802108c:	687b      	ldr	r3, [r7, #4]
 802108e:	685b      	ldr	r3, [r3, #4]
 8021090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021094:	d106      	bne.n	80210a4 <HAL_RCC_OscConfig+0x74>
 8021096:	4b76      	ldr	r3, [pc, #472]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	4a75      	ldr	r2, [pc, #468]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 802109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80210a0:	6013      	str	r3, [r2, #0]
 80210a2:	e01d      	b.n	80210e0 <HAL_RCC_OscConfig+0xb0>
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	685b      	ldr	r3, [r3, #4]
 80210a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80210ac:	d10c      	bne.n	80210c8 <HAL_RCC_OscConfig+0x98>
 80210ae:	4b70      	ldr	r3, [pc, #448]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80210b0:	681b      	ldr	r3, [r3, #0]
 80210b2:	4a6f      	ldr	r2, [pc, #444]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80210b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80210b8:	6013      	str	r3, [r2, #0]
 80210ba:	4b6d      	ldr	r3, [pc, #436]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80210bc:	681b      	ldr	r3, [r3, #0]
 80210be:	4a6c      	ldr	r2, [pc, #432]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80210c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80210c4:	6013      	str	r3, [r2, #0]
 80210c6:	e00b      	b.n	80210e0 <HAL_RCC_OscConfig+0xb0>
 80210c8:	4b69      	ldr	r3, [pc, #420]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80210ca:	681b      	ldr	r3, [r3, #0]
 80210cc:	4a68      	ldr	r2, [pc, #416]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80210ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80210d2:	6013      	str	r3, [r2, #0]
 80210d4:	4b66      	ldr	r3, [pc, #408]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80210d6:	681b      	ldr	r3, [r3, #0]
 80210d8:	4a65      	ldr	r2, [pc, #404]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80210da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80210de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	685b      	ldr	r3, [r3, #4]
 80210e4:	2b00      	cmp	r3, #0
 80210e6:	d013      	beq.n	8021110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80210e8:	f7ff fcbc 	bl	8020a64 <HAL_GetTick>
 80210ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80210ee:	e008      	b.n	8021102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80210f0:	f7ff fcb8 	bl	8020a64 <HAL_GetTick>
 80210f4:	4602      	mov	r2, r0
 80210f6:	693b      	ldr	r3, [r7, #16]
 80210f8:	1ad3      	subs	r3, r2, r3
 80210fa:	2b64      	cmp	r3, #100	; 0x64
 80210fc:	d901      	bls.n	8021102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80210fe:	2303      	movs	r3, #3
 8021100:	e207      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021102:	4b5b      	ldr	r3, [pc, #364]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802110a:	2b00      	cmp	r3, #0
 802110c:	d0f0      	beq.n	80210f0 <HAL_RCC_OscConfig+0xc0>
 802110e:	e014      	b.n	802113a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021110:	f7ff fca8 	bl	8020a64 <HAL_GetTick>
 8021114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021116:	e008      	b.n	802112a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021118:	f7ff fca4 	bl	8020a64 <HAL_GetTick>
 802111c:	4602      	mov	r2, r0
 802111e:	693b      	ldr	r3, [r7, #16]
 8021120:	1ad3      	subs	r3, r2, r3
 8021122:	2b64      	cmp	r3, #100	; 0x64
 8021124:	d901      	bls.n	802112a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8021126:	2303      	movs	r3, #3
 8021128:	e1f3      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802112a:	4b51      	ldr	r3, [pc, #324]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 802112c:	681b      	ldr	r3, [r3, #0]
 802112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021132:	2b00      	cmp	r3, #0
 8021134:	d1f0      	bne.n	8021118 <HAL_RCC_OscConfig+0xe8>
 8021136:	e000      	b.n	802113a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	f003 0302 	and.w	r3, r3, #2
 8021142:	2b00      	cmp	r3, #0
 8021144:	d063      	beq.n	802120e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8021146:	4b4a      	ldr	r3, [pc, #296]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021148:	689b      	ldr	r3, [r3, #8]
 802114a:	f003 030c 	and.w	r3, r3, #12
 802114e:	2b00      	cmp	r3, #0
 8021150:	d00b      	beq.n	802116a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021152:	4b47      	ldr	r3, [pc, #284]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021154:	689b      	ldr	r3, [r3, #8]
 8021156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802115a:	2b08      	cmp	r3, #8
 802115c:	d11c      	bne.n	8021198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802115e:	4b44      	ldr	r3, [pc, #272]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021160:	685b      	ldr	r3, [r3, #4]
 8021162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021166:	2b00      	cmp	r3, #0
 8021168:	d116      	bne.n	8021198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802116a:	4b41      	ldr	r3, [pc, #260]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 802116c:	681b      	ldr	r3, [r3, #0]
 802116e:	f003 0302 	and.w	r3, r3, #2
 8021172:	2b00      	cmp	r3, #0
 8021174:	d005      	beq.n	8021182 <HAL_RCC_OscConfig+0x152>
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	68db      	ldr	r3, [r3, #12]
 802117a:	2b01      	cmp	r3, #1
 802117c:	d001      	beq.n	8021182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802117e:	2301      	movs	r3, #1
 8021180:	e1c7      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021182:	4b3b      	ldr	r3, [pc, #236]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802118a:	687b      	ldr	r3, [r7, #4]
 802118c:	691b      	ldr	r3, [r3, #16]
 802118e:	00db      	lsls	r3, r3, #3
 8021190:	4937      	ldr	r1, [pc, #220]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021192:	4313      	orrs	r3, r2
 8021194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021196:	e03a      	b.n	802120e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	68db      	ldr	r3, [r3, #12]
 802119c:	2b00      	cmp	r3, #0
 802119e:	d020      	beq.n	80211e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80211a0:	4b34      	ldr	r3, [pc, #208]	; (8021274 <HAL_RCC_OscConfig+0x244>)
 80211a2:	2201      	movs	r2, #1
 80211a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80211a6:	f7ff fc5d 	bl	8020a64 <HAL_GetTick>
 80211aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80211ac:	e008      	b.n	80211c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80211ae:	f7ff fc59 	bl	8020a64 <HAL_GetTick>
 80211b2:	4602      	mov	r2, r0
 80211b4:	693b      	ldr	r3, [r7, #16]
 80211b6:	1ad3      	subs	r3, r2, r3
 80211b8:	2b02      	cmp	r3, #2
 80211ba:	d901      	bls.n	80211c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80211bc:	2303      	movs	r3, #3
 80211be:	e1a8      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80211c0:	4b2b      	ldr	r3, [pc, #172]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	f003 0302 	and.w	r3, r3, #2
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	d0f0      	beq.n	80211ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80211cc:	4b28      	ldr	r3, [pc, #160]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80211ce:	681b      	ldr	r3, [r3, #0]
 80211d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80211d4:	687b      	ldr	r3, [r7, #4]
 80211d6:	691b      	ldr	r3, [r3, #16]
 80211d8:	00db      	lsls	r3, r3, #3
 80211da:	4925      	ldr	r1, [pc, #148]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 80211dc:	4313      	orrs	r3, r2
 80211de:	600b      	str	r3, [r1, #0]
 80211e0:	e015      	b.n	802120e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80211e2:	4b24      	ldr	r3, [pc, #144]	; (8021274 <HAL_RCC_OscConfig+0x244>)
 80211e4:	2200      	movs	r2, #0
 80211e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80211e8:	f7ff fc3c 	bl	8020a64 <HAL_GetTick>
 80211ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80211ee:	e008      	b.n	8021202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80211f0:	f7ff fc38 	bl	8020a64 <HAL_GetTick>
 80211f4:	4602      	mov	r2, r0
 80211f6:	693b      	ldr	r3, [r7, #16]
 80211f8:	1ad3      	subs	r3, r2, r3
 80211fa:	2b02      	cmp	r3, #2
 80211fc:	d901      	bls.n	8021202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80211fe:	2303      	movs	r3, #3
 8021200:	e187      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021202:	4b1b      	ldr	r3, [pc, #108]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021204:	681b      	ldr	r3, [r3, #0]
 8021206:	f003 0302 	and.w	r3, r3, #2
 802120a:	2b00      	cmp	r3, #0
 802120c:	d1f0      	bne.n	80211f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802120e:	687b      	ldr	r3, [r7, #4]
 8021210:	681b      	ldr	r3, [r3, #0]
 8021212:	f003 0308 	and.w	r3, r3, #8
 8021216:	2b00      	cmp	r3, #0
 8021218:	d036      	beq.n	8021288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802121a:	687b      	ldr	r3, [r7, #4]
 802121c:	695b      	ldr	r3, [r3, #20]
 802121e:	2b00      	cmp	r3, #0
 8021220:	d016      	beq.n	8021250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021222:	4b15      	ldr	r3, [pc, #84]	; (8021278 <HAL_RCC_OscConfig+0x248>)
 8021224:	2201      	movs	r2, #1
 8021226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021228:	f7ff fc1c 	bl	8020a64 <HAL_GetTick>
 802122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802122e:	e008      	b.n	8021242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021230:	f7ff fc18 	bl	8020a64 <HAL_GetTick>
 8021234:	4602      	mov	r2, r0
 8021236:	693b      	ldr	r3, [r7, #16]
 8021238:	1ad3      	subs	r3, r2, r3
 802123a:	2b02      	cmp	r3, #2
 802123c:	d901      	bls.n	8021242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802123e:	2303      	movs	r3, #3
 8021240:	e167      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021242:	4b0b      	ldr	r3, [pc, #44]	; (8021270 <HAL_RCC_OscConfig+0x240>)
 8021244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021246:	f003 0302 	and.w	r3, r3, #2
 802124a:	2b00      	cmp	r3, #0
 802124c:	d0f0      	beq.n	8021230 <HAL_RCC_OscConfig+0x200>
 802124e:	e01b      	b.n	8021288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021250:	4b09      	ldr	r3, [pc, #36]	; (8021278 <HAL_RCC_OscConfig+0x248>)
 8021252:	2200      	movs	r2, #0
 8021254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021256:	f7ff fc05 	bl	8020a64 <HAL_GetTick>
 802125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802125c:	e00e      	b.n	802127c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802125e:	f7ff fc01 	bl	8020a64 <HAL_GetTick>
 8021262:	4602      	mov	r2, r0
 8021264:	693b      	ldr	r3, [r7, #16]
 8021266:	1ad3      	subs	r3, r2, r3
 8021268:	2b02      	cmp	r3, #2
 802126a:	d907      	bls.n	802127c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802126c:	2303      	movs	r3, #3
 802126e:	e150      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
 8021270:	40023800 	.word	0x40023800
 8021274:	42470000 	.word	0x42470000
 8021278:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802127c:	4b88      	ldr	r3, [pc, #544]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 802127e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021280:	f003 0302 	and.w	r3, r3, #2
 8021284:	2b00      	cmp	r3, #0
 8021286:	d1ea      	bne.n	802125e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	681b      	ldr	r3, [r3, #0]
 802128c:	f003 0304 	and.w	r3, r3, #4
 8021290:	2b00      	cmp	r3, #0
 8021292:	f000 8097 	beq.w	80213c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021296:	2300      	movs	r3, #0
 8021298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802129a:	4b81      	ldr	r3, [pc, #516]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 802129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80212a2:	2b00      	cmp	r3, #0
 80212a4:	d10f      	bne.n	80212c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80212a6:	2300      	movs	r3, #0
 80212a8:	60bb      	str	r3, [r7, #8]
 80212aa:	4b7d      	ldr	r3, [pc, #500]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 80212ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80212ae:	4a7c      	ldr	r2, [pc, #496]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 80212b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80212b4:	6413      	str	r3, [r2, #64]	; 0x40
 80212b6:	4b7a      	ldr	r3, [pc, #488]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 80212b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80212ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80212be:	60bb      	str	r3, [r7, #8]
 80212c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80212c2:	2301      	movs	r3, #1
 80212c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80212c6:	4b77      	ldr	r3, [pc, #476]	; (80214a4 <HAL_RCC_OscConfig+0x474>)
 80212c8:	681b      	ldr	r3, [r3, #0]
 80212ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d118      	bne.n	8021304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80212d2:	4b74      	ldr	r3, [pc, #464]	; (80214a4 <HAL_RCC_OscConfig+0x474>)
 80212d4:	681b      	ldr	r3, [r3, #0]
 80212d6:	4a73      	ldr	r2, [pc, #460]	; (80214a4 <HAL_RCC_OscConfig+0x474>)
 80212d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80212dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80212de:	f7ff fbc1 	bl	8020a64 <HAL_GetTick>
 80212e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80212e4:	e008      	b.n	80212f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80212e6:	f7ff fbbd 	bl	8020a64 <HAL_GetTick>
 80212ea:	4602      	mov	r2, r0
 80212ec:	693b      	ldr	r3, [r7, #16]
 80212ee:	1ad3      	subs	r3, r2, r3
 80212f0:	2b02      	cmp	r3, #2
 80212f2:	d901      	bls.n	80212f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80212f4:	2303      	movs	r3, #3
 80212f6:	e10c      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80212f8:	4b6a      	ldr	r3, [pc, #424]	; (80214a4 <HAL_RCC_OscConfig+0x474>)
 80212fa:	681b      	ldr	r3, [r3, #0]
 80212fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021300:	2b00      	cmp	r3, #0
 8021302:	d0f0      	beq.n	80212e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	689b      	ldr	r3, [r3, #8]
 8021308:	2b01      	cmp	r3, #1
 802130a:	d106      	bne.n	802131a <HAL_RCC_OscConfig+0x2ea>
 802130c:	4b64      	ldr	r3, [pc, #400]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 802130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021310:	4a63      	ldr	r2, [pc, #396]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 8021312:	f043 0301 	orr.w	r3, r3, #1
 8021316:	6713      	str	r3, [r2, #112]	; 0x70
 8021318:	e01c      	b.n	8021354 <HAL_RCC_OscConfig+0x324>
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	689b      	ldr	r3, [r3, #8]
 802131e:	2b05      	cmp	r3, #5
 8021320:	d10c      	bne.n	802133c <HAL_RCC_OscConfig+0x30c>
 8021322:	4b5f      	ldr	r3, [pc, #380]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 8021324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021326:	4a5e      	ldr	r2, [pc, #376]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 8021328:	f043 0304 	orr.w	r3, r3, #4
 802132c:	6713      	str	r3, [r2, #112]	; 0x70
 802132e:	4b5c      	ldr	r3, [pc, #368]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 8021330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021332:	4a5b      	ldr	r2, [pc, #364]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 8021334:	f043 0301 	orr.w	r3, r3, #1
 8021338:	6713      	str	r3, [r2, #112]	; 0x70
 802133a:	e00b      	b.n	8021354 <HAL_RCC_OscConfig+0x324>
 802133c:	4b58      	ldr	r3, [pc, #352]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 802133e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021340:	4a57      	ldr	r2, [pc, #348]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 8021342:	f023 0301 	bic.w	r3, r3, #1
 8021346:	6713      	str	r3, [r2, #112]	; 0x70
 8021348:	4b55      	ldr	r3, [pc, #340]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 802134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802134c:	4a54      	ldr	r2, [pc, #336]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 802134e:	f023 0304 	bic.w	r3, r3, #4
 8021352:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8021354:	687b      	ldr	r3, [r7, #4]
 8021356:	689b      	ldr	r3, [r3, #8]
 8021358:	2b00      	cmp	r3, #0
 802135a:	d015      	beq.n	8021388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802135c:	f7ff fb82 	bl	8020a64 <HAL_GetTick>
 8021360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021362:	e00a      	b.n	802137a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021364:	f7ff fb7e 	bl	8020a64 <HAL_GetTick>
 8021368:	4602      	mov	r2, r0
 802136a:	693b      	ldr	r3, [r7, #16]
 802136c:	1ad3      	subs	r3, r2, r3
 802136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8021372:	4293      	cmp	r3, r2
 8021374:	d901      	bls.n	802137a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8021376:	2303      	movs	r3, #3
 8021378:	e0cb      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802137a:	4b49      	ldr	r3, [pc, #292]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 802137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802137e:	f003 0302 	and.w	r3, r3, #2
 8021382:	2b00      	cmp	r3, #0
 8021384:	d0ee      	beq.n	8021364 <HAL_RCC_OscConfig+0x334>
 8021386:	e014      	b.n	80213b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021388:	f7ff fb6c 	bl	8020a64 <HAL_GetTick>
 802138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802138e:	e00a      	b.n	80213a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021390:	f7ff fb68 	bl	8020a64 <HAL_GetTick>
 8021394:	4602      	mov	r2, r0
 8021396:	693b      	ldr	r3, [r7, #16]
 8021398:	1ad3      	subs	r3, r2, r3
 802139a:	f241 3288 	movw	r2, #5000	; 0x1388
 802139e:	4293      	cmp	r3, r2
 80213a0:	d901      	bls.n	80213a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80213a2:	2303      	movs	r3, #3
 80213a4:	e0b5      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80213a6:	4b3e      	ldr	r3, [pc, #248]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 80213a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80213aa:	f003 0302 	and.w	r3, r3, #2
 80213ae:	2b00      	cmp	r3, #0
 80213b0:	d1ee      	bne.n	8021390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80213b2:	7dfb      	ldrb	r3, [r7, #23]
 80213b4:	2b01      	cmp	r3, #1
 80213b6:	d105      	bne.n	80213c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80213b8:	4b39      	ldr	r3, [pc, #228]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 80213ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80213bc:	4a38      	ldr	r2, [pc, #224]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 80213be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80213c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	699b      	ldr	r3, [r3, #24]
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	f000 80a1 	beq.w	8021510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80213ce:	4b34      	ldr	r3, [pc, #208]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 80213d0:	689b      	ldr	r3, [r3, #8]
 80213d2:	f003 030c 	and.w	r3, r3, #12
 80213d6:	2b08      	cmp	r3, #8
 80213d8:	d05c      	beq.n	8021494 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80213da:	687b      	ldr	r3, [r7, #4]
 80213dc:	699b      	ldr	r3, [r3, #24]
 80213de:	2b02      	cmp	r3, #2
 80213e0:	d141      	bne.n	8021466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80213e2:	4b31      	ldr	r3, [pc, #196]	; (80214a8 <HAL_RCC_OscConfig+0x478>)
 80213e4:	2200      	movs	r2, #0
 80213e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80213e8:	f7ff fb3c 	bl	8020a64 <HAL_GetTick>
 80213ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80213ee:	e008      	b.n	8021402 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80213f0:	f7ff fb38 	bl	8020a64 <HAL_GetTick>
 80213f4:	4602      	mov	r2, r0
 80213f6:	693b      	ldr	r3, [r7, #16]
 80213f8:	1ad3      	subs	r3, r2, r3
 80213fa:	2b02      	cmp	r3, #2
 80213fc:	d901      	bls.n	8021402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80213fe:	2303      	movs	r3, #3
 8021400:	e087      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021402:	4b27      	ldr	r3, [pc, #156]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 8021404:	681b      	ldr	r3, [r3, #0]
 8021406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802140a:	2b00      	cmp	r3, #0
 802140c:	d1f0      	bne.n	80213f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802140e:	687b      	ldr	r3, [r7, #4]
 8021410:	69da      	ldr	r2, [r3, #28]
 8021412:	687b      	ldr	r3, [r7, #4]
 8021414:	6a1b      	ldr	r3, [r3, #32]
 8021416:	431a      	orrs	r2, r3
 8021418:	687b      	ldr	r3, [r7, #4]
 802141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802141c:	019b      	lsls	r3, r3, #6
 802141e:	431a      	orrs	r2, r3
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021424:	085b      	lsrs	r3, r3, #1
 8021426:	3b01      	subs	r3, #1
 8021428:	041b      	lsls	r3, r3, #16
 802142a:	431a      	orrs	r2, r3
 802142c:	687b      	ldr	r3, [r7, #4]
 802142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021430:	061b      	lsls	r3, r3, #24
 8021432:	491b      	ldr	r1, [pc, #108]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 8021434:	4313      	orrs	r3, r2
 8021436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8021438:	4b1b      	ldr	r3, [pc, #108]	; (80214a8 <HAL_RCC_OscConfig+0x478>)
 802143a:	2201      	movs	r2, #1
 802143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802143e:	f7ff fb11 	bl	8020a64 <HAL_GetTick>
 8021442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021444:	e008      	b.n	8021458 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021446:	f7ff fb0d 	bl	8020a64 <HAL_GetTick>
 802144a:	4602      	mov	r2, r0
 802144c:	693b      	ldr	r3, [r7, #16]
 802144e:	1ad3      	subs	r3, r2, r3
 8021450:	2b02      	cmp	r3, #2
 8021452:	d901      	bls.n	8021458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8021454:	2303      	movs	r3, #3
 8021456:	e05c      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021458:	4b11      	ldr	r3, [pc, #68]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 802145a:	681b      	ldr	r3, [r3, #0]
 802145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021460:	2b00      	cmp	r3, #0
 8021462:	d0f0      	beq.n	8021446 <HAL_RCC_OscConfig+0x416>
 8021464:	e054      	b.n	8021510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021466:	4b10      	ldr	r3, [pc, #64]	; (80214a8 <HAL_RCC_OscConfig+0x478>)
 8021468:	2200      	movs	r2, #0
 802146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802146c:	f7ff fafa 	bl	8020a64 <HAL_GetTick>
 8021470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021472:	e008      	b.n	8021486 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021474:	f7ff faf6 	bl	8020a64 <HAL_GetTick>
 8021478:	4602      	mov	r2, r0
 802147a:	693b      	ldr	r3, [r7, #16]
 802147c:	1ad3      	subs	r3, r2, r3
 802147e:	2b02      	cmp	r3, #2
 8021480:	d901      	bls.n	8021486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8021482:	2303      	movs	r3, #3
 8021484:	e045      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021486:	4b06      	ldr	r3, [pc, #24]	; (80214a0 <HAL_RCC_OscConfig+0x470>)
 8021488:	681b      	ldr	r3, [r3, #0]
 802148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802148e:	2b00      	cmp	r3, #0
 8021490:	d1f0      	bne.n	8021474 <HAL_RCC_OscConfig+0x444>
 8021492:	e03d      	b.n	8021510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021494:	687b      	ldr	r3, [r7, #4]
 8021496:	699b      	ldr	r3, [r3, #24]
 8021498:	2b01      	cmp	r3, #1
 802149a:	d107      	bne.n	80214ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 802149c:	2301      	movs	r3, #1
 802149e:	e038      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
 80214a0:	40023800 	.word	0x40023800
 80214a4:	40007000 	.word	0x40007000
 80214a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80214ac:	4b1b      	ldr	r3, [pc, #108]	; (802151c <HAL_RCC_OscConfig+0x4ec>)
 80214ae:	685b      	ldr	r3, [r3, #4]
 80214b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	699b      	ldr	r3, [r3, #24]
 80214b6:	2b01      	cmp	r3, #1
 80214b8:	d028      	beq.n	802150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80214ba:	68fb      	ldr	r3, [r7, #12]
 80214bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80214c0:	687b      	ldr	r3, [r7, #4]
 80214c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80214c4:	429a      	cmp	r2, r3
 80214c6:	d121      	bne.n	802150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80214c8:	68fb      	ldr	r3, [r7, #12]
 80214ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80214ce:	687b      	ldr	r3, [r7, #4]
 80214d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80214d2:	429a      	cmp	r2, r3
 80214d4:	d11a      	bne.n	802150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80214d6:	68fa      	ldr	r2, [r7, #12]
 80214d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80214dc:	4013      	ands	r3, r2
 80214de:	687a      	ldr	r2, [r7, #4]
 80214e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80214e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80214e4:	4293      	cmp	r3, r2
 80214e6:	d111      	bne.n	802150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80214e8:	68fb      	ldr	r3, [r7, #12]
 80214ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80214ee:	687b      	ldr	r3, [r7, #4]
 80214f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80214f2:	085b      	lsrs	r3, r3, #1
 80214f4:	3b01      	subs	r3, #1
 80214f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80214f8:	429a      	cmp	r2, r3
 80214fa:	d107      	bne.n	802150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80214fc:	68fb      	ldr	r3, [r7, #12]
 80214fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8021508:	429a      	cmp	r2, r3
 802150a:	d001      	beq.n	8021510 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 802150c:	2301      	movs	r3, #1
 802150e:	e000      	b.n	8021512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8021510:	2300      	movs	r3, #0
}
 8021512:	4618      	mov	r0, r3
 8021514:	3718      	adds	r7, #24
 8021516:	46bd      	mov	sp, r7
 8021518:	bd80      	pop	{r7, pc}
 802151a:	bf00      	nop
 802151c:	40023800 	.word	0x40023800

08021520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8021520:	b580      	push	{r7, lr}
 8021522:	b084      	sub	sp, #16
 8021524:	af00      	add	r7, sp, #0
 8021526:	6078      	str	r0, [r7, #4]
 8021528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802152a:	687b      	ldr	r3, [r7, #4]
 802152c:	2b00      	cmp	r3, #0
 802152e:	d101      	bne.n	8021534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8021530:	2301      	movs	r3, #1
 8021532:	e0cc      	b.n	80216ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8021534:	4b68      	ldr	r3, [pc, #416]	; (80216d8 <HAL_RCC_ClockConfig+0x1b8>)
 8021536:	681b      	ldr	r3, [r3, #0]
 8021538:	f003 0307 	and.w	r3, r3, #7
 802153c:	683a      	ldr	r2, [r7, #0]
 802153e:	429a      	cmp	r2, r3
 8021540:	d90c      	bls.n	802155c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021542:	4b65      	ldr	r3, [pc, #404]	; (80216d8 <HAL_RCC_ClockConfig+0x1b8>)
 8021544:	683a      	ldr	r2, [r7, #0]
 8021546:	b2d2      	uxtb	r2, r2
 8021548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802154a:	4b63      	ldr	r3, [pc, #396]	; (80216d8 <HAL_RCC_ClockConfig+0x1b8>)
 802154c:	681b      	ldr	r3, [r3, #0]
 802154e:	f003 0307 	and.w	r3, r3, #7
 8021552:	683a      	ldr	r2, [r7, #0]
 8021554:	429a      	cmp	r2, r3
 8021556:	d001      	beq.n	802155c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8021558:	2301      	movs	r3, #1
 802155a:	e0b8      	b.n	80216ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	f003 0302 	and.w	r3, r3, #2
 8021564:	2b00      	cmp	r3, #0
 8021566:	d020      	beq.n	80215aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021568:	687b      	ldr	r3, [r7, #4]
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	f003 0304 	and.w	r3, r3, #4
 8021570:	2b00      	cmp	r3, #0
 8021572:	d005      	beq.n	8021580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8021574:	4b59      	ldr	r3, [pc, #356]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 8021576:	689b      	ldr	r3, [r3, #8]
 8021578:	4a58      	ldr	r2, [pc, #352]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 802157a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802157e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021580:	687b      	ldr	r3, [r7, #4]
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	f003 0308 	and.w	r3, r3, #8
 8021588:	2b00      	cmp	r3, #0
 802158a:	d005      	beq.n	8021598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802158c:	4b53      	ldr	r3, [pc, #332]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 802158e:	689b      	ldr	r3, [r3, #8]
 8021590:	4a52      	ldr	r2, [pc, #328]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 8021592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8021596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021598:	4b50      	ldr	r3, [pc, #320]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 802159a:	689b      	ldr	r3, [r3, #8]
 802159c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80215a0:	687b      	ldr	r3, [r7, #4]
 80215a2:	689b      	ldr	r3, [r3, #8]
 80215a4:	494d      	ldr	r1, [pc, #308]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 80215a6:	4313      	orrs	r3, r2
 80215a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	681b      	ldr	r3, [r3, #0]
 80215ae:	f003 0301 	and.w	r3, r3, #1
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	d044      	beq.n	8021640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	685b      	ldr	r3, [r3, #4]
 80215ba:	2b01      	cmp	r3, #1
 80215bc:	d107      	bne.n	80215ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80215be:	4b47      	ldr	r3, [pc, #284]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 80215c0:	681b      	ldr	r3, [r3, #0]
 80215c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d119      	bne.n	80215fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80215ca:	2301      	movs	r3, #1
 80215cc:	e07f      	b.n	80216ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	685b      	ldr	r3, [r3, #4]
 80215d2:	2b02      	cmp	r3, #2
 80215d4:	d003      	beq.n	80215de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80215da:	2b03      	cmp	r3, #3
 80215dc:	d107      	bne.n	80215ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80215de:	4b3f      	ldr	r3, [pc, #252]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 80215e0:	681b      	ldr	r3, [r3, #0]
 80215e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	d109      	bne.n	80215fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80215ea:	2301      	movs	r3, #1
 80215ec:	e06f      	b.n	80216ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80215ee:	4b3b      	ldr	r3, [pc, #236]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 80215f0:	681b      	ldr	r3, [r3, #0]
 80215f2:	f003 0302 	and.w	r3, r3, #2
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d101      	bne.n	80215fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80215fa:	2301      	movs	r3, #1
 80215fc:	e067      	b.n	80216ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80215fe:	4b37      	ldr	r3, [pc, #220]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 8021600:	689b      	ldr	r3, [r3, #8]
 8021602:	f023 0203 	bic.w	r2, r3, #3
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	685b      	ldr	r3, [r3, #4]
 802160a:	4934      	ldr	r1, [pc, #208]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 802160c:	4313      	orrs	r3, r2
 802160e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8021610:	f7ff fa28 	bl	8020a64 <HAL_GetTick>
 8021614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021616:	e00a      	b.n	802162e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021618:	f7ff fa24 	bl	8020a64 <HAL_GetTick>
 802161c:	4602      	mov	r2, r0
 802161e:	68fb      	ldr	r3, [r7, #12]
 8021620:	1ad3      	subs	r3, r2, r3
 8021622:	f241 3288 	movw	r2, #5000	; 0x1388
 8021626:	4293      	cmp	r3, r2
 8021628:	d901      	bls.n	802162e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802162a:	2303      	movs	r3, #3
 802162c:	e04f      	b.n	80216ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802162e:	4b2b      	ldr	r3, [pc, #172]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 8021630:	689b      	ldr	r3, [r3, #8]
 8021632:	f003 020c 	and.w	r2, r3, #12
 8021636:	687b      	ldr	r3, [r7, #4]
 8021638:	685b      	ldr	r3, [r3, #4]
 802163a:	009b      	lsls	r3, r3, #2
 802163c:	429a      	cmp	r2, r3
 802163e:	d1eb      	bne.n	8021618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021640:	4b25      	ldr	r3, [pc, #148]	; (80216d8 <HAL_RCC_ClockConfig+0x1b8>)
 8021642:	681b      	ldr	r3, [r3, #0]
 8021644:	f003 0307 	and.w	r3, r3, #7
 8021648:	683a      	ldr	r2, [r7, #0]
 802164a:	429a      	cmp	r2, r3
 802164c:	d20c      	bcs.n	8021668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802164e:	4b22      	ldr	r3, [pc, #136]	; (80216d8 <HAL_RCC_ClockConfig+0x1b8>)
 8021650:	683a      	ldr	r2, [r7, #0]
 8021652:	b2d2      	uxtb	r2, r2
 8021654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021656:	4b20      	ldr	r3, [pc, #128]	; (80216d8 <HAL_RCC_ClockConfig+0x1b8>)
 8021658:	681b      	ldr	r3, [r3, #0]
 802165a:	f003 0307 	and.w	r3, r3, #7
 802165e:	683a      	ldr	r2, [r7, #0]
 8021660:	429a      	cmp	r2, r3
 8021662:	d001      	beq.n	8021668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8021664:	2301      	movs	r3, #1
 8021666:	e032      	b.n	80216ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021668:	687b      	ldr	r3, [r7, #4]
 802166a:	681b      	ldr	r3, [r3, #0]
 802166c:	f003 0304 	and.w	r3, r3, #4
 8021670:	2b00      	cmp	r3, #0
 8021672:	d008      	beq.n	8021686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021674:	4b19      	ldr	r3, [pc, #100]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 8021676:	689b      	ldr	r3, [r3, #8]
 8021678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	68db      	ldr	r3, [r3, #12]
 8021680:	4916      	ldr	r1, [pc, #88]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 8021682:	4313      	orrs	r3, r2
 8021684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	681b      	ldr	r3, [r3, #0]
 802168a:	f003 0308 	and.w	r3, r3, #8
 802168e:	2b00      	cmp	r3, #0
 8021690:	d009      	beq.n	80216a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021692:	4b12      	ldr	r3, [pc, #72]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 8021694:	689b      	ldr	r3, [r3, #8]
 8021696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	691b      	ldr	r3, [r3, #16]
 802169e:	00db      	lsls	r3, r3, #3
 80216a0:	490e      	ldr	r1, [pc, #56]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 80216a2:	4313      	orrs	r3, r2
 80216a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80216a6:	f000 f821 	bl	80216ec <HAL_RCC_GetSysClockFreq>
 80216aa:	4602      	mov	r2, r0
 80216ac:	4b0b      	ldr	r3, [pc, #44]	; (80216dc <HAL_RCC_ClockConfig+0x1bc>)
 80216ae:	689b      	ldr	r3, [r3, #8]
 80216b0:	091b      	lsrs	r3, r3, #4
 80216b2:	f003 030f 	and.w	r3, r3, #15
 80216b6:	490a      	ldr	r1, [pc, #40]	; (80216e0 <HAL_RCC_ClockConfig+0x1c0>)
 80216b8:	5ccb      	ldrb	r3, [r1, r3]
 80216ba:	fa22 f303 	lsr.w	r3, r2, r3
 80216be:	4a09      	ldr	r2, [pc, #36]	; (80216e4 <HAL_RCC_ClockConfig+0x1c4>)
 80216c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80216c2:	4b09      	ldr	r3, [pc, #36]	; (80216e8 <HAL_RCC_ClockConfig+0x1c8>)
 80216c4:	681b      	ldr	r3, [r3, #0]
 80216c6:	4618      	mov	r0, r3
 80216c8:	f7ff f988 	bl	80209dc <HAL_InitTick>

  return HAL_OK;
 80216cc:	2300      	movs	r3, #0
}
 80216ce:	4618      	mov	r0, r3
 80216d0:	3710      	adds	r7, #16
 80216d2:	46bd      	mov	sp, r7
 80216d4:	bd80      	pop	{r7, pc}
 80216d6:	bf00      	nop
 80216d8:	40023c00 	.word	0x40023c00
 80216dc:	40023800 	.word	0x40023800
 80216e0:	08022830 	.word	0x08022830
 80216e4:	20000000 	.word	0x20000000
 80216e8:	20000004 	.word	0x20000004

080216ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80216ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80216f0:	b090      	sub	sp, #64	; 0x40
 80216f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80216f4:	2300      	movs	r3, #0
 80216f6:	637b      	str	r3, [r7, #52]	; 0x34
 80216f8:	2300      	movs	r3, #0
 80216fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80216fc:	2300      	movs	r3, #0
 80216fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8021700:	2300      	movs	r3, #0
 8021702:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8021704:	4b59      	ldr	r3, [pc, #356]	; (802186c <HAL_RCC_GetSysClockFreq+0x180>)
 8021706:	689b      	ldr	r3, [r3, #8]
 8021708:	f003 030c 	and.w	r3, r3, #12
 802170c:	2b08      	cmp	r3, #8
 802170e:	d00d      	beq.n	802172c <HAL_RCC_GetSysClockFreq+0x40>
 8021710:	2b08      	cmp	r3, #8
 8021712:	f200 80a1 	bhi.w	8021858 <HAL_RCC_GetSysClockFreq+0x16c>
 8021716:	2b00      	cmp	r3, #0
 8021718:	d002      	beq.n	8021720 <HAL_RCC_GetSysClockFreq+0x34>
 802171a:	2b04      	cmp	r3, #4
 802171c:	d003      	beq.n	8021726 <HAL_RCC_GetSysClockFreq+0x3a>
 802171e:	e09b      	b.n	8021858 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8021720:	4b53      	ldr	r3, [pc, #332]	; (8021870 <HAL_RCC_GetSysClockFreq+0x184>)
 8021722:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8021724:	e09b      	b.n	802185e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8021726:	4b53      	ldr	r3, [pc, #332]	; (8021874 <HAL_RCC_GetSysClockFreq+0x188>)
 8021728:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802172a:	e098      	b.n	802185e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802172c:	4b4f      	ldr	r3, [pc, #316]	; (802186c <HAL_RCC_GetSysClockFreq+0x180>)
 802172e:	685b      	ldr	r3, [r3, #4]
 8021730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8021734:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8021736:	4b4d      	ldr	r3, [pc, #308]	; (802186c <HAL_RCC_GetSysClockFreq+0x180>)
 8021738:	685b      	ldr	r3, [r3, #4]
 802173a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802173e:	2b00      	cmp	r3, #0
 8021740:	d028      	beq.n	8021794 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021742:	4b4a      	ldr	r3, [pc, #296]	; (802186c <HAL_RCC_GetSysClockFreq+0x180>)
 8021744:	685b      	ldr	r3, [r3, #4]
 8021746:	099b      	lsrs	r3, r3, #6
 8021748:	2200      	movs	r2, #0
 802174a:	623b      	str	r3, [r7, #32]
 802174c:	627a      	str	r2, [r7, #36]	; 0x24
 802174e:	6a3b      	ldr	r3, [r7, #32]
 8021750:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8021754:	2100      	movs	r1, #0
 8021756:	4b47      	ldr	r3, [pc, #284]	; (8021874 <HAL_RCC_GetSysClockFreq+0x188>)
 8021758:	fb03 f201 	mul.w	r2, r3, r1
 802175c:	2300      	movs	r3, #0
 802175e:	fb00 f303 	mul.w	r3, r0, r3
 8021762:	4413      	add	r3, r2
 8021764:	4a43      	ldr	r2, [pc, #268]	; (8021874 <HAL_RCC_GetSysClockFreq+0x188>)
 8021766:	fba0 1202 	umull	r1, r2, r0, r2
 802176a:	62fa      	str	r2, [r7, #44]	; 0x2c
 802176c:	460a      	mov	r2, r1
 802176e:	62ba      	str	r2, [r7, #40]	; 0x28
 8021770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021772:	4413      	add	r3, r2
 8021774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021778:	2200      	movs	r2, #0
 802177a:	61bb      	str	r3, [r7, #24]
 802177c:	61fa      	str	r2, [r7, #28]
 802177e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021782:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8021786:	f7fe fd73 	bl	8020270 <__aeabi_uldivmod>
 802178a:	4602      	mov	r2, r0
 802178c:	460b      	mov	r3, r1
 802178e:	4613      	mov	r3, r2
 8021790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021792:	e053      	b.n	802183c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021794:	4b35      	ldr	r3, [pc, #212]	; (802186c <HAL_RCC_GetSysClockFreq+0x180>)
 8021796:	685b      	ldr	r3, [r3, #4]
 8021798:	099b      	lsrs	r3, r3, #6
 802179a:	2200      	movs	r2, #0
 802179c:	613b      	str	r3, [r7, #16]
 802179e:	617a      	str	r2, [r7, #20]
 80217a0:	693b      	ldr	r3, [r7, #16]
 80217a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80217a6:	f04f 0b00 	mov.w	fp, #0
 80217aa:	4652      	mov	r2, sl
 80217ac:	465b      	mov	r3, fp
 80217ae:	f04f 0000 	mov.w	r0, #0
 80217b2:	f04f 0100 	mov.w	r1, #0
 80217b6:	0159      	lsls	r1, r3, #5
 80217b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80217bc:	0150      	lsls	r0, r2, #5
 80217be:	4602      	mov	r2, r0
 80217c0:	460b      	mov	r3, r1
 80217c2:	ebb2 080a 	subs.w	r8, r2, sl
 80217c6:	eb63 090b 	sbc.w	r9, r3, fp
 80217ca:	f04f 0200 	mov.w	r2, #0
 80217ce:	f04f 0300 	mov.w	r3, #0
 80217d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80217d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80217da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80217de:	ebb2 0408 	subs.w	r4, r2, r8
 80217e2:	eb63 0509 	sbc.w	r5, r3, r9
 80217e6:	f04f 0200 	mov.w	r2, #0
 80217ea:	f04f 0300 	mov.w	r3, #0
 80217ee:	00eb      	lsls	r3, r5, #3
 80217f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80217f4:	00e2      	lsls	r2, r4, #3
 80217f6:	4614      	mov	r4, r2
 80217f8:	461d      	mov	r5, r3
 80217fa:	eb14 030a 	adds.w	r3, r4, sl
 80217fe:	603b      	str	r3, [r7, #0]
 8021800:	eb45 030b 	adc.w	r3, r5, fp
 8021804:	607b      	str	r3, [r7, #4]
 8021806:	f04f 0200 	mov.w	r2, #0
 802180a:	f04f 0300 	mov.w	r3, #0
 802180e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8021812:	4629      	mov	r1, r5
 8021814:	028b      	lsls	r3, r1, #10
 8021816:	4621      	mov	r1, r4
 8021818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802181c:	4621      	mov	r1, r4
 802181e:	028a      	lsls	r2, r1, #10
 8021820:	4610      	mov	r0, r2
 8021822:	4619      	mov	r1, r3
 8021824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021826:	2200      	movs	r2, #0
 8021828:	60bb      	str	r3, [r7, #8]
 802182a:	60fa      	str	r2, [r7, #12]
 802182c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021830:	f7fe fd1e 	bl	8020270 <__aeabi_uldivmod>
 8021834:	4602      	mov	r2, r0
 8021836:	460b      	mov	r3, r1
 8021838:	4613      	mov	r3, r2
 802183a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802183c:	4b0b      	ldr	r3, [pc, #44]	; (802186c <HAL_RCC_GetSysClockFreq+0x180>)
 802183e:	685b      	ldr	r3, [r3, #4]
 8021840:	0c1b      	lsrs	r3, r3, #16
 8021842:	f003 0303 	and.w	r3, r3, #3
 8021846:	3301      	adds	r3, #1
 8021848:	005b      	lsls	r3, r3, #1
 802184a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 802184c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802184e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021850:	fbb2 f3f3 	udiv	r3, r2, r3
 8021854:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8021856:	e002      	b.n	802185e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8021858:	4b05      	ldr	r3, [pc, #20]	; (8021870 <HAL_RCC_GetSysClockFreq+0x184>)
 802185a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802185c:	bf00      	nop
    }
  }
  return sysclockfreq;
 802185e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8021860:	4618      	mov	r0, r3
 8021862:	3740      	adds	r7, #64	; 0x40
 8021864:	46bd      	mov	sp, r7
 8021866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802186a:	bf00      	nop
 802186c:	40023800 	.word	0x40023800
 8021870:	00f42400 	.word	0x00f42400
 8021874:	017d7840 	.word	0x017d7840

08021878 <__errno>:
 8021878:	4b01      	ldr	r3, [pc, #4]	; (8021880 <__errno+0x8>)
 802187a:	6818      	ldr	r0, [r3, #0]
 802187c:	4770      	bx	lr
 802187e:	bf00      	nop
 8021880:	2000000c 	.word	0x2000000c

08021884 <__libc_init_array>:
 8021884:	b570      	push	{r4, r5, r6, lr}
 8021886:	4d0d      	ldr	r5, [pc, #52]	; (80218bc <__libc_init_array+0x38>)
 8021888:	4c0d      	ldr	r4, [pc, #52]	; (80218c0 <__libc_init_array+0x3c>)
 802188a:	1b64      	subs	r4, r4, r5
 802188c:	10a4      	asrs	r4, r4, #2
 802188e:	2600      	movs	r6, #0
 8021890:	42a6      	cmp	r6, r4
 8021892:	d109      	bne.n	80218a8 <__libc_init_array+0x24>
 8021894:	4d0b      	ldr	r5, [pc, #44]	; (80218c4 <__libc_init_array+0x40>)
 8021896:	4c0c      	ldr	r4, [pc, #48]	; (80218c8 <__libc_init_array+0x44>)
 8021898:	f000 ffae 	bl	80227f8 <_init>
 802189c:	1b64      	subs	r4, r4, r5
 802189e:	10a4      	asrs	r4, r4, #2
 80218a0:	2600      	movs	r6, #0
 80218a2:	42a6      	cmp	r6, r4
 80218a4:	d105      	bne.n	80218b2 <__libc_init_array+0x2e>
 80218a6:	bd70      	pop	{r4, r5, r6, pc}
 80218a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80218ac:	4798      	blx	r3
 80218ae:	3601      	adds	r6, #1
 80218b0:	e7ee      	b.n	8021890 <__libc_init_array+0xc>
 80218b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80218b6:	4798      	blx	r3
 80218b8:	3601      	adds	r6, #1
 80218ba:	e7f2      	b.n	80218a2 <__libc_init_array+0x1e>
 80218bc:	080228e0 	.word	0x080228e0
 80218c0:	080228e0 	.word	0x080228e0
 80218c4:	080228e0 	.word	0x080228e0
 80218c8:	080228e4 	.word	0x080228e4

080218cc <memset>:
 80218cc:	4402      	add	r2, r0
 80218ce:	4603      	mov	r3, r0
 80218d0:	4293      	cmp	r3, r2
 80218d2:	d100      	bne.n	80218d6 <memset+0xa>
 80218d4:	4770      	bx	lr
 80218d6:	f803 1b01 	strb.w	r1, [r3], #1
 80218da:	e7f9      	b.n	80218d0 <memset+0x4>

080218dc <iprintf>:
 80218dc:	b40f      	push	{r0, r1, r2, r3}
 80218de:	4b0a      	ldr	r3, [pc, #40]	; (8021908 <iprintf+0x2c>)
 80218e0:	b513      	push	{r0, r1, r4, lr}
 80218e2:	681c      	ldr	r4, [r3, #0]
 80218e4:	b124      	cbz	r4, 80218f0 <iprintf+0x14>
 80218e6:	69a3      	ldr	r3, [r4, #24]
 80218e8:	b913      	cbnz	r3, 80218f0 <iprintf+0x14>
 80218ea:	4620      	mov	r0, r4
 80218ec:	f000 f866 	bl	80219bc <__sinit>
 80218f0:	ab05      	add	r3, sp, #20
 80218f2:	9a04      	ldr	r2, [sp, #16]
 80218f4:	68a1      	ldr	r1, [r4, #8]
 80218f6:	9301      	str	r3, [sp, #4]
 80218f8:	4620      	mov	r0, r4
 80218fa:	f000 f9bd 	bl	8021c78 <_vfiprintf_r>
 80218fe:	b002      	add	sp, #8
 8021900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021904:	b004      	add	sp, #16
 8021906:	4770      	bx	lr
 8021908:	2000000c 	.word	0x2000000c

0802190c <std>:
 802190c:	2300      	movs	r3, #0
 802190e:	b510      	push	{r4, lr}
 8021910:	4604      	mov	r4, r0
 8021912:	e9c0 3300 	strd	r3, r3, [r0]
 8021916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802191a:	6083      	str	r3, [r0, #8]
 802191c:	8181      	strh	r1, [r0, #12]
 802191e:	6643      	str	r3, [r0, #100]	; 0x64
 8021920:	81c2      	strh	r2, [r0, #14]
 8021922:	6183      	str	r3, [r0, #24]
 8021924:	4619      	mov	r1, r3
 8021926:	2208      	movs	r2, #8
 8021928:	305c      	adds	r0, #92	; 0x5c
 802192a:	f7ff ffcf 	bl	80218cc <memset>
 802192e:	4b05      	ldr	r3, [pc, #20]	; (8021944 <std+0x38>)
 8021930:	6263      	str	r3, [r4, #36]	; 0x24
 8021932:	4b05      	ldr	r3, [pc, #20]	; (8021948 <std+0x3c>)
 8021934:	62a3      	str	r3, [r4, #40]	; 0x28
 8021936:	4b05      	ldr	r3, [pc, #20]	; (802194c <std+0x40>)
 8021938:	62e3      	str	r3, [r4, #44]	; 0x2c
 802193a:	4b05      	ldr	r3, [pc, #20]	; (8021950 <std+0x44>)
 802193c:	6224      	str	r4, [r4, #32]
 802193e:	6323      	str	r3, [r4, #48]	; 0x30
 8021940:	bd10      	pop	{r4, pc}
 8021942:	bf00      	nop
 8021944:	08022221 	.word	0x08022221
 8021948:	08022243 	.word	0x08022243
 802194c:	0802227b 	.word	0x0802227b
 8021950:	0802229f 	.word	0x0802229f

08021954 <_cleanup_r>:
 8021954:	4901      	ldr	r1, [pc, #4]	; (802195c <_cleanup_r+0x8>)
 8021956:	f000 b8af 	b.w	8021ab8 <_fwalk_reent>
 802195a:	bf00      	nop
 802195c:	08022579 	.word	0x08022579

08021960 <__sfmoreglue>:
 8021960:	b570      	push	{r4, r5, r6, lr}
 8021962:	2268      	movs	r2, #104	; 0x68
 8021964:	1e4d      	subs	r5, r1, #1
 8021966:	4355      	muls	r5, r2
 8021968:	460e      	mov	r6, r1
 802196a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802196e:	f000 f8e5 	bl	8021b3c <_malloc_r>
 8021972:	4604      	mov	r4, r0
 8021974:	b140      	cbz	r0, 8021988 <__sfmoreglue+0x28>
 8021976:	2100      	movs	r1, #0
 8021978:	e9c0 1600 	strd	r1, r6, [r0]
 802197c:	300c      	adds	r0, #12
 802197e:	60a0      	str	r0, [r4, #8]
 8021980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021984:	f7ff ffa2 	bl	80218cc <memset>
 8021988:	4620      	mov	r0, r4
 802198a:	bd70      	pop	{r4, r5, r6, pc}

0802198c <__sfp_lock_acquire>:
 802198c:	4801      	ldr	r0, [pc, #4]	; (8021994 <__sfp_lock_acquire+0x8>)
 802198e:	f000 b8b3 	b.w	8021af8 <__retarget_lock_acquire_recursive>
 8021992:	bf00      	nop
 8021994:	20000095 	.word	0x20000095

08021998 <__sfp_lock_release>:
 8021998:	4801      	ldr	r0, [pc, #4]	; (80219a0 <__sfp_lock_release+0x8>)
 802199a:	f000 b8ae 	b.w	8021afa <__retarget_lock_release_recursive>
 802199e:	bf00      	nop
 80219a0:	20000095 	.word	0x20000095

080219a4 <__sinit_lock_acquire>:
 80219a4:	4801      	ldr	r0, [pc, #4]	; (80219ac <__sinit_lock_acquire+0x8>)
 80219a6:	f000 b8a7 	b.w	8021af8 <__retarget_lock_acquire_recursive>
 80219aa:	bf00      	nop
 80219ac:	20000096 	.word	0x20000096

080219b0 <__sinit_lock_release>:
 80219b0:	4801      	ldr	r0, [pc, #4]	; (80219b8 <__sinit_lock_release+0x8>)
 80219b2:	f000 b8a2 	b.w	8021afa <__retarget_lock_release_recursive>
 80219b6:	bf00      	nop
 80219b8:	20000096 	.word	0x20000096

080219bc <__sinit>:
 80219bc:	b510      	push	{r4, lr}
 80219be:	4604      	mov	r4, r0
 80219c0:	f7ff fff0 	bl	80219a4 <__sinit_lock_acquire>
 80219c4:	69a3      	ldr	r3, [r4, #24]
 80219c6:	b11b      	cbz	r3, 80219d0 <__sinit+0x14>
 80219c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80219cc:	f7ff bff0 	b.w	80219b0 <__sinit_lock_release>
 80219d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80219d4:	6523      	str	r3, [r4, #80]	; 0x50
 80219d6:	4b13      	ldr	r3, [pc, #76]	; (8021a24 <__sinit+0x68>)
 80219d8:	4a13      	ldr	r2, [pc, #76]	; (8021a28 <__sinit+0x6c>)
 80219da:	681b      	ldr	r3, [r3, #0]
 80219dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80219de:	42a3      	cmp	r3, r4
 80219e0:	bf04      	itt	eq
 80219e2:	2301      	moveq	r3, #1
 80219e4:	61a3      	streq	r3, [r4, #24]
 80219e6:	4620      	mov	r0, r4
 80219e8:	f000 f820 	bl	8021a2c <__sfp>
 80219ec:	6060      	str	r0, [r4, #4]
 80219ee:	4620      	mov	r0, r4
 80219f0:	f000 f81c 	bl	8021a2c <__sfp>
 80219f4:	60a0      	str	r0, [r4, #8]
 80219f6:	4620      	mov	r0, r4
 80219f8:	f000 f818 	bl	8021a2c <__sfp>
 80219fc:	2200      	movs	r2, #0
 80219fe:	60e0      	str	r0, [r4, #12]
 8021a00:	2104      	movs	r1, #4
 8021a02:	6860      	ldr	r0, [r4, #4]
 8021a04:	f7ff ff82 	bl	802190c <std>
 8021a08:	68a0      	ldr	r0, [r4, #8]
 8021a0a:	2201      	movs	r2, #1
 8021a0c:	2109      	movs	r1, #9
 8021a0e:	f7ff ff7d 	bl	802190c <std>
 8021a12:	68e0      	ldr	r0, [r4, #12]
 8021a14:	2202      	movs	r2, #2
 8021a16:	2112      	movs	r1, #18
 8021a18:	f7ff ff78 	bl	802190c <std>
 8021a1c:	2301      	movs	r3, #1
 8021a1e:	61a3      	str	r3, [r4, #24]
 8021a20:	e7d2      	b.n	80219c8 <__sinit+0xc>
 8021a22:	bf00      	nop
 8021a24:	08022840 	.word	0x08022840
 8021a28:	08021955 	.word	0x08021955

08021a2c <__sfp>:
 8021a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a2e:	4607      	mov	r7, r0
 8021a30:	f7ff ffac 	bl	802198c <__sfp_lock_acquire>
 8021a34:	4b1e      	ldr	r3, [pc, #120]	; (8021ab0 <__sfp+0x84>)
 8021a36:	681e      	ldr	r6, [r3, #0]
 8021a38:	69b3      	ldr	r3, [r6, #24]
 8021a3a:	b913      	cbnz	r3, 8021a42 <__sfp+0x16>
 8021a3c:	4630      	mov	r0, r6
 8021a3e:	f7ff ffbd 	bl	80219bc <__sinit>
 8021a42:	3648      	adds	r6, #72	; 0x48
 8021a44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021a48:	3b01      	subs	r3, #1
 8021a4a:	d503      	bpl.n	8021a54 <__sfp+0x28>
 8021a4c:	6833      	ldr	r3, [r6, #0]
 8021a4e:	b30b      	cbz	r3, 8021a94 <__sfp+0x68>
 8021a50:	6836      	ldr	r6, [r6, #0]
 8021a52:	e7f7      	b.n	8021a44 <__sfp+0x18>
 8021a54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021a58:	b9d5      	cbnz	r5, 8021a90 <__sfp+0x64>
 8021a5a:	4b16      	ldr	r3, [pc, #88]	; (8021ab4 <__sfp+0x88>)
 8021a5c:	60e3      	str	r3, [r4, #12]
 8021a5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021a62:	6665      	str	r5, [r4, #100]	; 0x64
 8021a64:	f000 f847 	bl	8021af6 <__retarget_lock_init_recursive>
 8021a68:	f7ff ff96 	bl	8021998 <__sfp_lock_release>
 8021a6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021a70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021a74:	6025      	str	r5, [r4, #0]
 8021a76:	61a5      	str	r5, [r4, #24]
 8021a78:	2208      	movs	r2, #8
 8021a7a:	4629      	mov	r1, r5
 8021a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021a80:	f7ff ff24 	bl	80218cc <memset>
 8021a84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021a88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021a8c:	4620      	mov	r0, r4
 8021a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a90:	3468      	adds	r4, #104	; 0x68
 8021a92:	e7d9      	b.n	8021a48 <__sfp+0x1c>
 8021a94:	2104      	movs	r1, #4
 8021a96:	4638      	mov	r0, r7
 8021a98:	f7ff ff62 	bl	8021960 <__sfmoreglue>
 8021a9c:	4604      	mov	r4, r0
 8021a9e:	6030      	str	r0, [r6, #0]
 8021aa0:	2800      	cmp	r0, #0
 8021aa2:	d1d5      	bne.n	8021a50 <__sfp+0x24>
 8021aa4:	f7ff ff78 	bl	8021998 <__sfp_lock_release>
 8021aa8:	230c      	movs	r3, #12
 8021aaa:	603b      	str	r3, [r7, #0]
 8021aac:	e7ee      	b.n	8021a8c <__sfp+0x60>
 8021aae:	bf00      	nop
 8021ab0:	08022840 	.word	0x08022840
 8021ab4:	ffff0001 	.word	0xffff0001

08021ab8 <_fwalk_reent>:
 8021ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021abc:	4606      	mov	r6, r0
 8021abe:	4688      	mov	r8, r1
 8021ac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021ac4:	2700      	movs	r7, #0
 8021ac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021aca:	f1b9 0901 	subs.w	r9, r9, #1
 8021ace:	d505      	bpl.n	8021adc <_fwalk_reent+0x24>
 8021ad0:	6824      	ldr	r4, [r4, #0]
 8021ad2:	2c00      	cmp	r4, #0
 8021ad4:	d1f7      	bne.n	8021ac6 <_fwalk_reent+0xe>
 8021ad6:	4638      	mov	r0, r7
 8021ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021adc:	89ab      	ldrh	r3, [r5, #12]
 8021ade:	2b01      	cmp	r3, #1
 8021ae0:	d907      	bls.n	8021af2 <_fwalk_reent+0x3a>
 8021ae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021ae6:	3301      	adds	r3, #1
 8021ae8:	d003      	beq.n	8021af2 <_fwalk_reent+0x3a>
 8021aea:	4629      	mov	r1, r5
 8021aec:	4630      	mov	r0, r6
 8021aee:	47c0      	blx	r8
 8021af0:	4307      	orrs	r7, r0
 8021af2:	3568      	adds	r5, #104	; 0x68
 8021af4:	e7e9      	b.n	8021aca <_fwalk_reent+0x12>

08021af6 <__retarget_lock_init_recursive>:
 8021af6:	4770      	bx	lr

08021af8 <__retarget_lock_acquire_recursive>:
 8021af8:	4770      	bx	lr

08021afa <__retarget_lock_release_recursive>:
 8021afa:	4770      	bx	lr

08021afc <sbrk_aligned>:
 8021afc:	b570      	push	{r4, r5, r6, lr}
 8021afe:	4e0e      	ldr	r6, [pc, #56]	; (8021b38 <sbrk_aligned+0x3c>)
 8021b00:	460c      	mov	r4, r1
 8021b02:	6831      	ldr	r1, [r6, #0]
 8021b04:	4605      	mov	r5, r0
 8021b06:	b911      	cbnz	r1, 8021b0e <sbrk_aligned+0x12>
 8021b08:	f000 fb7a 	bl	8022200 <_sbrk_r>
 8021b0c:	6030      	str	r0, [r6, #0]
 8021b0e:	4621      	mov	r1, r4
 8021b10:	4628      	mov	r0, r5
 8021b12:	f000 fb75 	bl	8022200 <_sbrk_r>
 8021b16:	1c43      	adds	r3, r0, #1
 8021b18:	d00a      	beq.n	8021b30 <sbrk_aligned+0x34>
 8021b1a:	1cc4      	adds	r4, r0, #3
 8021b1c:	f024 0403 	bic.w	r4, r4, #3
 8021b20:	42a0      	cmp	r0, r4
 8021b22:	d007      	beq.n	8021b34 <sbrk_aligned+0x38>
 8021b24:	1a21      	subs	r1, r4, r0
 8021b26:	4628      	mov	r0, r5
 8021b28:	f000 fb6a 	bl	8022200 <_sbrk_r>
 8021b2c:	3001      	adds	r0, #1
 8021b2e:	d101      	bne.n	8021b34 <sbrk_aligned+0x38>
 8021b30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8021b34:	4620      	mov	r0, r4
 8021b36:	bd70      	pop	{r4, r5, r6, pc}
 8021b38:	2000009c 	.word	0x2000009c

08021b3c <_malloc_r>:
 8021b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b40:	1ccd      	adds	r5, r1, #3
 8021b42:	f025 0503 	bic.w	r5, r5, #3
 8021b46:	3508      	adds	r5, #8
 8021b48:	2d0c      	cmp	r5, #12
 8021b4a:	bf38      	it	cc
 8021b4c:	250c      	movcc	r5, #12
 8021b4e:	2d00      	cmp	r5, #0
 8021b50:	4607      	mov	r7, r0
 8021b52:	db01      	blt.n	8021b58 <_malloc_r+0x1c>
 8021b54:	42a9      	cmp	r1, r5
 8021b56:	d905      	bls.n	8021b64 <_malloc_r+0x28>
 8021b58:	230c      	movs	r3, #12
 8021b5a:	603b      	str	r3, [r7, #0]
 8021b5c:	2600      	movs	r6, #0
 8021b5e:	4630      	mov	r0, r6
 8021b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b64:	4e2e      	ldr	r6, [pc, #184]	; (8021c20 <_malloc_r+0xe4>)
 8021b66:	f000 fdbb 	bl	80226e0 <__malloc_lock>
 8021b6a:	6833      	ldr	r3, [r6, #0]
 8021b6c:	461c      	mov	r4, r3
 8021b6e:	bb34      	cbnz	r4, 8021bbe <_malloc_r+0x82>
 8021b70:	4629      	mov	r1, r5
 8021b72:	4638      	mov	r0, r7
 8021b74:	f7ff ffc2 	bl	8021afc <sbrk_aligned>
 8021b78:	1c43      	adds	r3, r0, #1
 8021b7a:	4604      	mov	r4, r0
 8021b7c:	d14d      	bne.n	8021c1a <_malloc_r+0xde>
 8021b7e:	6834      	ldr	r4, [r6, #0]
 8021b80:	4626      	mov	r6, r4
 8021b82:	2e00      	cmp	r6, #0
 8021b84:	d140      	bne.n	8021c08 <_malloc_r+0xcc>
 8021b86:	6823      	ldr	r3, [r4, #0]
 8021b88:	4631      	mov	r1, r6
 8021b8a:	4638      	mov	r0, r7
 8021b8c:	eb04 0803 	add.w	r8, r4, r3
 8021b90:	f000 fb36 	bl	8022200 <_sbrk_r>
 8021b94:	4580      	cmp	r8, r0
 8021b96:	d13a      	bne.n	8021c0e <_malloc_r+0xd2>
 8021b98:	6821      	ldr	r1, [r4, #0]
 8021b9a:	3503      	adds	r5, #3
 8021b9c:	1a6d      	subs	r5, r5, r1
 8021b9e:	f025 0503 	bic.w	r5, r5, #3
 8021ba2:	3508      	adds	r5, #8
 8021ba4:	2d0c      	cmp	r5, #12
 8021ba6:	bf38      	it	cc
 8021ba8:	250c      	movcc	r5, #12
 8021baa:	4629      	mov	r1, r5
 8021bac:	4638      	mov	r0, r7
 8021bae:	f7ff ffa5 	bl	8021afc <sbrk_aligned>
 8021bb2:	3001      	adds	r0, #1
 8021bb4:	d02b      	beq.n	8021c0e <_malloc_r+0xd2>
 8021bb6:	6823      	ldr	r3, [r4, #0]
 8021bb8:	442b      	add	r3, r5
 8021bba:	6023      	str	r3, [r4, #0]
 8021bbc:	e00e      	b.n	8021bdc <_malloc_r+0xa0>
 8021bbe:	6822      	ldr	r2, [r4, #0]
 8021bc0:	1b52      	subs	r2, r2, r5
 8021bc2:	d41e      	bmi.n	8021c02 <_malloc_r+0xc6>
 8021bc4:	2a0b      	cmp	r2, #11
 8021bc6:	d916      	bls.n	8021bf6 <_malloc_r+0xba>
 8021bc8:	1961      	adds	r1, r4, r5
 8021bca:	42a3      	cmp	r3, r4
 8021bcc:	6025      	str	r5, [r4, #0]
 8021bce:	bf18      	it	ne
 8021bd0:	6059      	strne	r1, [r3, #4]
 8021bd2:	6863      	ldr	r3, [r4, #4]
 8021bd4:	bf08      	it	eq
 8021bd6:	6031      	streq	r1, [r6, #0]
 8021bd8:	5162      	str	r2, [r4, r5]
 8021bda:	604b      	str	r3, [r1, #4]
 8021bdc:	4638      	mov	r0, r7
 8021bde:	f104 060b 	add.w	r6, r4, #11
 8021be2:	f000 fd83 	bl	80226ec <__malloc_unlock>
 8021be6:	f026 0607 	bic.w	r6, r6, #7
 8021bea:	1d23      	adds	r3, r4, #4
 8021bec:	1af2      	subs	r2, r6, r3
 8021bee:	d0b6      	beq.n	8021b5e <_malloc_r+0x22>
 8021bf0:	1b9b      	subs	r3, r3, r6
 8021bf2:	50a3      	str	r3, [r4, r2]
 8021bf4:	e7b3      	b.n	8021b5e <_malloc_r+0x22>
 8021bf6:	6862      	ldr	r2, [r4, #4]
 8021bf8:	42a3      	cmp	r3, r4
 8021bfa:	bf0c      	ite	eq
 8021bfc:	6032      	streq	r2, [r6, #0]
 8021bfe:	605a      	strne	r2, [r3, #4]
 8021c00:	e7ec      	b.n	8021bdc <_malloc_r+0xa0>
 8021c02:	4623      	mov	r3, r4
 8021c04:	6864      	ldr	r4, [r4, #4]
 8021c06:	e7b2      	b.n	8021b6e <_malloc_r+0x32>
 8021c08:	4634      	mov	r4, r6
 8021c0a:	6876      	ldr	r6, [r6, #4]
 8021c0c:	e7b9      	b.n	8021b82 <_malloc_r+0x46>
 8021c0e:	230c      	movs	r3, #12
 8021c10:	603b      	str	r3, [r7, #0]
 8021c12:	4638      	mov	r0, r7
 8021c14:	f000 fd6a 	bl	80226ec <__malloc_unlock>
 8021c18:	e7a1      	b.n	8021b5e <_malloc_r+0x22>
 8021c1a:	6025      	str	r5, [r4, #0]
 8021c1c:	e7de      	b.n	8021bdc <_malloc_r+0xa0>
 8021c1e:	bf00      	nop
 8021c20:	20000098 	.word	0x20000098

08021c24 <__sfputc_r>:
 8021c24:	6893      	ldr	r3, [r2, #8]
 8021c26:	3b01      	subs	r3, #1
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	b410      	push	{r4}
 8021c2c:	6093      	str	r3, [r2, #8]
 8021c2e:	da08      	bge.n	8021c42 <__sfputc_r+0x1e>
 8021c30:	6994      	ldr	r4, [r2, #24]
 8021c32:	42a3      	cmp	r3, r4
 8021c34:	db01      	blt.n	8021c3a <__sfputc_r+0x16>
 8021c36:	290a      	cmp	r1, #10
 8021c38:	d103      	bne.n	8021c42 <__sfputc_r+0x1e>
 8021c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021c3e:	f000 bb33 	b.w	80222a8 <__swbuf_r>
 8021c42:	6813      	ldr	r3, [r2, #0]
 8021c44:	1c58      	adds	r0, r3, #1
 8021c46:	6010      	str	r0, [r2, #0]
 8021c48:	7019      	strb	r1, [r3, #0]
 8021c4a:	4608      	mov	r0, r1
 8021c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021c50:	4770      	bx	lr

08021c52 <__sfputs_r>:
 8021c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c54:	4606      	mov	r6, r0
 8021c56:	460f      	mov	r7, r1
 8021c58:	4614      	mov	r4, r2
 8021c5a:	18d5      	adds	r5, r2, r3
 8021c5c:	42ac      	cmp	r4, r5
 8021c5e:	d101      	bne.n	8021c64 <__sfputs_r+0x12>
 8021c60:	2000      	movs	r0, #0
 8021c62:	e007      	b.n	8021c74 <__sfputs_r+0x22>
 8021c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c68:	463a      	mov	r2, r7
 8021c6a:	4630      	mov	r0, r6
 8021c6c:	f7ff ffda 	bl	8021c24 <__sfputc_r>
 8021c70:	1c43      	adds	r3, r0, #1
 8021c72:	d1f3      	bne.n	8021c5c <__sfputs_r+0xa>
 8021c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021c78 <_vfiprintf_r>:
 8021c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c7c:	460d      	mov	r5, r1
 8021c7e:	b09d      	sub	sp, #116	; 0x74
 8021c80:	4614      	mov	r4, r2
 8021c82:	4698      	mov	r8, r3
 8021c84:	4606      	mov	r6, r0
 8021c86:	b118      	cbz	r0, 8021c90 <_vfiprintf_r+0x18>
 8021c88:	6983      	ldr	r3, [r0, #24]
 8021c8a:	b90b      	cbnz	r3, 8021c90 <_vfiprintf_r+0x18>
 8021c8c:	f7ff fe96 	bl	80219bc <__sinit>
 8021c90:	4b89      	ldr	r3, [pc, #548]	; (8021eb8 <_vfiprintf_r+0x240>)
 8021c92:	429d      	cmp	r5, r3
 8021c94:	d11b      	bne.n	8021cce <_vfiprintf_r+0x56>
 8021c96:	6875      	ldr	r5, [r6, #4]
 8021c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021c9a:	07d9      	lsls	r1, r3, #31
 8021c9c:	d405      	bmi.n	8021caa <_vfiprintf_r+0x32>
 8021c9e:	89ab      	ldrh	r3, [r5, #12]
 8021ca0:	059a      	lsls	r2, r3, #22
 8021ca2:	d402      	bmi.n	8021caa <_vfiprintf_r+0x32>
 8021ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021ca6:	f7ff ff27 	bl	8021af8 <__retarget_lock_acquire_recursive>
 8021caa:	89ab      	ldrh	r3, [r5, #12]
 8021cac:	071b      	lsls	r3, r3, #28
 8021cae:	d501      	bpl.n	8021cb4 <_vfiprintf_r+0x3c>
 8021cb0:	692b      	ldr	r3, [r5, #16]
 8021cb2:	b9eb      	cbnz	r3, 8021cf0 <_vfiprintf_r+0x78>
 8021cb4:	4629      	mov	r1, r5
 8021cb6:	4630      	mov	r0, r6
 8021cb8:	f000 fb5a 	bl	8022370 <__swsetup_r>
 8021cbc:	b1c0      	cbz	r0, 8021cf0 <_vfiprintf_r+0x78>
 8021cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021cc0:	07dc      	lsls	r4, r3, #31
 8021cc2:	d50e      	bpl.n	8021ce2 <_vfiprintf_r+0x6a>
 8021cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021cc8:	b01d      	add	sp, #116	; 0x74
 8021cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cce:	4b7b      	ldr	r3, [pc, #492]	; (8021ebc <_vfiprintf_r+0x244>)
 8021cd0:	429d      	cmp	r5, r3
 8021cd2:	d101      	bne.n	8021cd8 <_vfiprintf_r+0x60>
 8021cd4:	68b5      	ldr	r5, [r6, #8]
 8021cd6:	e7df      	b.n	8021c98 <_vfiprintf_r+0x20>
 8021cd8:	4b79      	ldr	r3, [pc, #484]	; (8021ec0 <_vfiprintf_r+0x248>)
 8021cda:	429d      	cmp	r5, r3
 8021cdc:	bf08      	it	eq
 8021cde:	68f5      	ldreq	r5, [r6, #12]
 8021ce0:	e7da      	b.n	8021c98 <_vfiprintf_r+0x20>
 8021ce2:	89ab      	ldrh	r3, [r5, #12]
 8021ce4:	0598      	lsls	r0, r3, #22
 8021ce6:	d4ed      	bmi.n	8021cc4 <_vfiprintf_r+0x4c>
 8021ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021cea:	f7ff ff06 	bl	8021afa <__retarget_lock_release_recursive>
 8021cee:	e7e9      	b.n	8021cc4 <_vfiprintf_r+0x4c>
 8021cf0:	2300      	movs	r3, #0
 8021cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8021cf4:	2320      	movs	r3, #32
 8021cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8021cfe:	2330      	movs	r3, #48	; 0x30
 8021d00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021ec4 <_vfiprintf_r+0x24c>
 8021d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021d08:	f04f 0901 	mov.w	r9, #1
 8021d0c:	4623      	mov	r3, r4
 8021d0e:	469a      	mov	sl, r3
 8021d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021d14:	b10a      	cbz	r2, 8021d1a <_vfiprintf_r+0xa2>
 8021d16:	2a25      	cmp	r2, #37	; 0x25
 8021d18:	d1f9      	bne.n	8021d0e <_vfiprintf_r+0x96>
 8021d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8021d1e:	d00b      	beq.n	8021d38 <_vfiprintf_r+0xc0>
 8021d20:	465b      	mov	r3, fp
 8021d22:	4622      	mov	r2, r4
 8021d24:	4629      	mov	r1, r5
 8021d26:	4630      	mov	r0, r6
 8021d28:	f7ff ff93 	bl	8021c52 <__sfputs_r>
 8021d2c:	3001      	adds	r0, #1
 8021d2e:	f000 80aa 	beq.w	8021e86 <_vfiprintf_r+0x20e>
 8021d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d34:	445a      	add	r2, fp
 8021d36:	9209      	str	r2, [sp, #36]	; 0x24
 8021d38:	f89a 3000 	ldrb.w	r3, [sl]
 8021d3c:	2b00      	cmp	r3, #0
 8021d3e:	f000 80a2 	beq.w	8021e86 <_vfiprintf_r+0x20e>
 8021d42:	2300      	movs	r3, #0
 8021d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021d4c:	f10a 0a01 	add.w	sl, sl, #1
 8021d50:	9304      	str	r3, [sp, #16]
 8021d52:	9307      	str	r3, [sp, #28]
 8021d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021d58:	931a      	str	r3, [sp, #104]	; 0x68
 8021d5a:	4654      	mov	r4, sl
 8021d5c:	2205      	movs	r2, #5
 8021d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d62:	4858      	ldr	r0, [pc, #352]	; (8021ec4 <_vfiprintf_r+0x24c>)
 8021d64:	f7fe fa34 	bl	80201d0 <memchr>
 8021d68:	9a04      	ldr	r2, [sp, #16]
 8021d6a:	b9d8      	cbnz	r0, 8021da4 <_vfiprintf_r+0x12c>
 8021d6c:	06d1      	lsls	r1, r2, #27
 8021d6e:	bf44      	itt	mi
 8021d70:	2320      	movmi	r3, #32
 8021d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021d76:	0713      	lsls	r3, r2, #28
 8021d78:	bf44      	itt	mi
 8021d7a:	232b      	movmi	r3, #43	; 0x2b
 8021d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021d80:	f89a 3000 	ldrb.w	r3, [sl]
 8021d84:	2b2a      	cmp	r3, #42	; 0x2a
 8021d86:	d015      	beq.n	8021db4 <_vfiprintf_r+0x13c>
 8021d88:	9a07      	ldr	r2, [sp, #28]
 8021d8a:	4654      	mov	r4, sl
 8021d8c:	2000      	movs	r0, #0
 8021d8e:	f04f 0c0a 	mov.w	ip, #10
 8021d92:	4621      	mov	r1, r4
 8021d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021d98:	3b30      	subs	r3, #48	; 0x30
 8021d9a:	2b09      	cmp	r3, #9
 8021d9c:	d94e      	bls.n	8021e3c <_vfiprintf_r+0x1c4>
 8021d9e:	b1b0      	cbz	r0, 8021dce <_vfiprintf_r+0x156>
 8021da0:	9207      	str	r2, [sp, #28]
 8021da2:	e014      	b.n	8021dce <_vfiprintf_r+0x156>
 8021da4:	eba0 0308 	sub.w	r3, r0, r8
 8021da8:	fa09 f303 	lsl.w	r3, r9, r3
 8021dac:	4313      	orrs	r3, r2
 8021dae:	9304      	str	r3, [sp, #16]
 8021db0:	46a2      	mov	sl, r4
 8021db2:	e7d2      	b.n	8021d5a <_vfiprintf_r+0xe2>
 8021db4:	9b03      	ldr	r3, [sp, #12]
 8021db6:	1d19      	adds	r1, r3, #4
 8021db8:	681b      	ldr	r3, [r3, #0]
 8021dba:	9103      	str	r1, [sp, #12]
 8021dbc:	2b00      	cmp	r3, #0
 8021dbe:	bfbb      	ittet	lt
 8021dc0:	425b      	neglt	r3, r3
 8021dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8021dc6:	9307      	strge	r3, [sp, #28]
 8021dc8:	9307      	strlt	r3, [sp, #28]
 8021dca:	bfb8      	it	lt
 8021dcc:	9204      	strlt	r2, [sp, #16]
 8021dce:	7823      	ldrb	r3, [r4, #0]
 8021dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8021dd2:	d10c      	bne.n	8021dee <_vfiprintf_r+0x176>
 8021dd4:	7863      	ldrb	r3, [r4, #1]
 8021dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8021dd8:	d135      	bne.n	8021e46 <_vfiprintf_r+0x1ce>
 8021dda:	9b03      	ldr	r3, [sp, #12]
 8021ddc:	1d1a      	adds	r2, r3, #4
 8021dde:	681b      	ldr	r3, [r3, #0]
 8021de0:	9203      	str	r2, [sp, #12]
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	bfb8      	it	lt
 8021de6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8021dea:	3402      	adds	r4, #2
 8021dec:	9305      	str	r3, [sp, #20]
 8021dee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021ed4 <_vfiprintf_r+0x25c>
 8021df2:	7821      	ldrb	r1, [r4, #0]
 8021df4:	2203      	movs	r2, #3
 8021df6:	4650      	mov	r0, sl
 8021df8:	f7fe f9ea 	bl	80201d0 <memchr>
 8021dfc:	b140      	cbz	r0, 8021e10 <_vfiprintf_r+0x198>
 8021dfe:	2340      	movs	r3, #64	; 0x40
 8021e00:	eba0 000a 	sub.w	r0, r0, sl
 8021e04:	fa03 f000 	lsl.w	r0, r3, r0
 8021e08:	9b04      	ldr	r3, [sp, #16]
 8021e0a:	4303      	orrs	r3, r0
 8021e0c:	3401      	adds	r4, #1
 8021e0e:	9304      	str	r3, [sp, #16]
 8021e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e14:	482c      	ldr	r0, [pc, #176]	; (8021ec8 <_vfiprintf_r+0x250>)
 8021e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021e1a:	2206      	movs	r2, #6
 8021e1c:	f7fe f9d8 	bl	80201d0 <memchr>
 8021e20:	2800      	cmp	r0, #0
 8021e22:	d03f      	beq.n	8021ea4 <_vfiprintf_r+0x22c>
 8021e24:	4b29      	ldr	r3, [pc, #164]	; (8021ecc <_vfiprintf_r+0x254>)
 8021e26:	bb1b      	cbnz	r3, 8021e70 <_vfiprintf_r+0x1f8>
 8021e28:	9b03      	ldr	r3, [sp, #12]
 8021e2a:	3307      	adds	r3, #7
 8021e2c:	f023 0307 	bic.w	r3, r3, #7
 8021e30:	3308      	adds	r3, #8
 8021e32:	9303      	str	r3, [sp, #12]
 8021e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e36:	443b      	add	r3, r7
 8021e38:	9309      	str	r3, [sp, #36]	; 0x24
 8021e3a:	e767      	b.n	8021d0c <_vfiprintf_r+0x94>
 8021e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8021e40:	460c      	mov	r4, r1
 8021e42:	2001      	movs	r0, #1
 8021e44:	e7a5      	b.n	8021d92 <_vfiprintf_r+0x11a>
 8021e46:	2300      	movs	r3, #0
 8021e48:	3401      	adds	r4, #1
 8021e4a:	9305      	str	r3, [sp, #20]
 8021e4c:	4619      	mov	r1, r3
 8021e4e:	f04f 0c0a 	mov.w	ip, #10
 8021e52:	4620      	mov	r0, r4
 8021e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021e58:	3a30      	subs	r2, #48	; 0x30
 8021e5a:	2a09      	cmp	r2, #9
 8021e5c:	d903      	bls.n	8021e66 <_vfiprintf_r+0x1ee>
 8021e5e:	2b00      	cmp	r3, #0
 8021e60:	d0c5      	beq.n	8021dee <_vfiprintf_r+0x176>
 8021e62:	9105      	str	r1, [sp, #20]
 8021e64:	e7c3      	b.n	8021dee <_vfiprintf_r+0x176>
 8021e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8021e6a:	4604      	mov	r4, r0
 8021e6c:	2301      	movs	r3, #1
 8021e6e:	e7f0      	b.n	8021e52 <_vfiprintf_r+0x1da>
 8021e70:	ab03      	add	r3, sp, #12
 8021e72:	9300      	str	r3, [sp, #0]
 8021e74:	462a      	mov	r2, r5
 8021e76:	4b16      	ldr	r3, [pc, #88]	; (8021ed0 <_vfiprintf_r+0x258>)
 8021e78:	a904      	add	r1, sp, #16
 8021e7a:	4630      	mov	r0, r6
 8021e7c:	f3af 8000 	nop.w
 8021e80:	4607      	mov	r7, r0
 8021e82:	1c78      	adds	r0, r7, #1
 8021e84:	d1d6      	bne.n	8021e34 <_vfiprintf_r+0x1bc>
 8021e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021e88:	07d9      	lsls	r1, r3, #31
 8021e8a:	d405      	bmi.n	8021e98 <_vfiprintf_r+0x220>
 8021e8c:	89ab      	ldrh	r3, [r5, #12]
 8021e8e:	059a      	lsls	r2, r3, #22
 8021e90:	d402      	bmi.n	8021e98 <_vfiprintf_r+0x220>
 8021e92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021e94:	f7ff fe31 	bl	8021afa <__retarget_lock_release_recursive>
 8021e98:	89ab      	ldrh	r3, [r5, #12]
 8021e9a:	065b      	lsls	r3, r3, #25
 8021e9c:	f53f af12 	bmi.w	8021cc4 <_vfiprintf_r+0x4c>
 8021ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021ea2:	e711      	b.n	8021cc8 <_vfiprintf_r+0x50>
 8021ea4:	ab03      	add	r3, sp, #12
 8021ea6:	9300      	str	r3, [sp, #0]
 8021ea8:	462a      	mov	r2, r5
 8021eaa:	4b09      	ldr	r3, [pc, #36]	; (8021ed0 <_vfiprintf_r+0x258>)
 8021eac:	a904      	add	r1, sp, #16
 8021eae:	4630      	mov	r0, r6
 8021eb0:	f000 f880 	bl	8021fb4 <_printf_i>
 8021eb4:	e7e4      	b.n	8021e80 <_vfiprintf_r+0x208>
 8021eb6:	bf00      	nop
 8021eb8:	08022864 	.word	0x08022864
 8021ebc:	08022884 	.word	0x08022884
 8021ec0:	08022844 	.word	0x08022844
 8021ec4:	080228a4 	.word	0x080228a4
 8021ec8:	080228ae 	.word	0x080228ae
 8021ecc:	00000000 	.word	0x00000000
 8021ed0:	08021c53 	.word	0x08021c53
 8021ed4:	080228aa 	.word	0x080228aa

08021ed8 <_printf_common>:
 8021ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021edc:	4616      	mov	r6, r2
 8021ede:	4699      	mov	r9, r3
 8021ee0:	688a      	ldr	r2, [r1, #8]
 8021ee2:	690b      	ldr	r3, [r1, #16]
 8021ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021ee8:	4293      	cmp	r3, r2
 8021eea:	bfb8      	it	lt
 8021eec:	4613      	movlt	r3, r2
 8021eee:	6033      	str	r3, [r6, #0]
 8021ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021ef4:	4607      	mov	r7, r0
 8021ef6:	460c      	mov	r4, r1
 8021ef8:	b10a      	cbz	r2, 8021efe <_printf_common+0x26>
 8021efa:	3301      	adds	r3, #1
 8021efc:	6033      	str	r3, [r6, #0]
 8021efe:	6823      	ldr	r3, [r4, #0]
 8021f00:	0699      	lsls	r1, r3, #26
 8021f02:	bf42      	ittt	mi
 8021f04:	6833      	ldrmi	r3, [r6, #0]
 8021f06:	3302      	addmi	r3, #2
 8021f08:	6033      	strmi	r3, [r6, #0]
 8021f0a:	6825      	ldr	r5, [r4, #0]
 8021f0c:	f015 0506 	ands.w	r5, r5, #6
 8021f10:	d106      	bne.n	8021f20 <_printf_common+0x48>
 8021f12:	f104 0a19 	add.w	sl, r4, #25
 8021f16:	68e3      	ldr	r3, [r4, #12]
 8021f18:	6832      	ldr	r2, [r6, #0]
 8021f1a:	1a9b      	subs	r3, r3, r2
 8021f1c:	42ab      	cmp	r3, r5
 8021f1e:	dc26      	bgt.n	8021f6e <_printf_common+0x96>
 8021f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021f24:	1e13      	subs	r3, r2, #0
 8021f26:	6822      	ldr	r2, [r4, #0]
 8021f28:	bf18      	it	ne
 8021f2a:	2301      	movne	r3, #1
 8021f2c:	0692      	lsls	r2, r2, #26
 8021f2e:	d42b      	bmi.n	8021f88 <_printf_common+0xb0>
 8021f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021f34:	4649      	mov	r1, r9
 8021f36:	4638      	mov	r0, r7
 8021f38:	47c0      	blx	r8
 8021f3a:	3001      	adds	r0, #1
 8021f3c:	d01e      	beq.n	8021f7c <_printf_common+0xa4>
 8021f3e:	6823      	ldr	r3, [r4, #0]
 8021f40:	68e5      	ldr	r5, [r4, #12]
 8021f42:	6832      	ldr	r2, [r6, #0]
 8021f44:	f003 0306 	and.w	r3, r3, #6
 8021f48:	2b04      	cmp	r3, #4
 8021f4a:	bf08      	it	eq
 8021f4c:	1aad      	subeq	r5, r5, r2
 8021f4e:	68a3      	ldr	r3, [r4, #8]
 8021f50:	6922      	ldr	r2, [r4, #16]
 8021f52:	bf0c      	ite	eq
 8021f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021f58:	2500      	movne	r5, #0
 8021f5a:	4293      	cmp	r3, r2
 8021f5c:	bfc4      	itt	gt
 8021f5e:	1a9b      	subgt	r3, r3, r2
 8021f60:	18ed      	addgt	r5, r5, r3
 8021f62:	2600      	movs	r6, #0
 8021f64:	341a      	adds	r4, #26
 8021f66:	42b5      	cmp	r5, r6
 8021f68:	d11a      	bne.n	8021fa0 <_printf_common+0xc8>
 8021f6a:	2000      	movs	r0, #0
 8021f6c:	e008      	b.n	8021f80 <_printf_common+0xa8>
 8021f6e:	2301      	movs	r3, #1
 8021f70:	4652      	mov	r2, sl
 8021f72:	4649      	mov	r1, r9
 8021f74:	4638      	mov	r0, r7
 8021f76:	47c0      	blx	r8
 8021f78:	3001      	adds	r0, #1
 8021f7a:	d103      	bne.n	8021f84 <_printf_common+0xac>
 8021f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f84:	3501      	adds	r5, #1
 8021f86:	e7c6      	b.n	8021f16 <_printf_common+0x3e>
 8021f88:	18e1      	adds	r1, r4, r3
 8021f8a:	1c5a      	adds	r2, r3, #1
 8021f8c:	2030      	movs	r0, #48	; 0x30
 8021f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021f92:	4422      	add	r2, r4
 8021f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021f9c:	3302      	adds	r3, #2
 8021f9e:	e7c7      	b.n	8021f30 <_printf_common+0x58>
 8021fa0:	2301      	movs	r3, #1
 8021fa2:	4622      	mov	r2, r4
 8021fa4:	4649      	mov	r1, r9
 8021fa6:	4638      	mov	r0, r7
 8021fa8:	47c0      	blx	r8
 8021faa:	3001      	adds	r0, #1
 8021fac:	d0e6      	beq.n	8021f7c <_printf_common+0xa4>
 8021fae:	3601      	adds	r6, #1
 8021fb0:	e7d9      	b.n	8021f66 <_printf_common+0x8e>
	...

08021fb4 <_printf_i>:
 8021fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021fb8:	7e0f      	ldrb	r7, [r1, #24]
 8021fba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021fbc:	2f78      	cmp	r7, #120	; 0x78
 8021fbe:	4691      	mov	r9, r2
 8021fc0:	4680      	mov	r8, r0
 8021fc2:	460c      	mov	r4, r1
 8021fc4:	469a      	mov	sl, r3
 8021fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8021fca:	d807      	bhi.n	8021fdc <_printf_i+0x28>
 8021fcc:	2f62      	cmp	r7, #98	; 0x62
 8021fce:	d80a      	bhi.n	8021fe6 <_printf_i+0x32>
 8021fd0:	2f00      	cmp	r7, #0
 8021fd2:	f000 80d8 	beq.w	8022186 <_printf_i+0x1d2>
 8021fd6:	2f58      	cmp	r7, #88	; 0x58
 8021fd8:	f000 80a3 	beq.w	8022122 <_printf_i+0x16e>
 8021fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021fe4:	e03a      	b.n	802205c <_printf_i+0xa8>
 8021fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021fea:	2b15      	cmp	r3, #21
 8021fec:	d8f6      	bhi.n	8021fdc <_printf_i+0x28>
 8021fee:	a101      	add	r1, pc, #4	; (adr r1, 8021ff4 <_printf_i+0x40>)
 8021ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021ff4:	0802204d 	.word	0x0802204d
 8021ff8:	08022061 	.word	0x08022061
 8021ffc:	08021fdd 	.word	0x08021fdd
 8022000:	08021fdd 	.word	0x08021fdd
 8022004:	08021fdd 	.word	0x08021fdd
 8022008:	08021fdd 	.word	0x08021fdd
 802200c:	08022061 	.word	0x08022061
 8022010:	08021fdd 	.word	0x08021fdd
 8022014:	08021fdd 	.word	0x08021fdd
 8022018:	08021fdd 	.word	0x08021fdd
 802201c:	08021fdd 	.word	0x08021fdd
 8022020:	0802216d 	.word	0x0802216d
 8022024:	08022091 	.word	0x08022091
 8022028:	0802214f 	.word	0x0802214f
 802202c:	08021fdd 	.word	0x08021fdd
 8022030:	08021fdd 	.word	0x08021fdd
 8022034:	0802218f 	.word	0x0802218f
 8022038:	08021fdd 	.word	0x08021fdd
 802203c:	08022091 	.word	0x08022091
 8022040:	08021fdd 	.word	0x08021fdd
 8022044:	08021fdd 	.word	0x08021fdd
 8022048:	08022157 	.word	0x08022157
 802204c:	682b      	ldr	r3, [r5, #0]
 802204e:	1d1a      	adds	r2, r3, #4
 8022050:	681b      	ldr	r3, [r3, #0]
 8022052:	602a      	str	r2, [r5, #0]
 8022054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802205c:	2301      	movs	r3, #1
 802205e:	e0a3      	b.n	80221a8 <_printf_i+0x1f4>
 8022060:	6820      	ldr	r0, [r4, #0]
 8022062:	6829      	ldr	r1, [r5, #0]
 8022064:	0606      	lsls	r6, r0, #24
 8022066:	f101 0304 	add.w	r3, r1, #4
 802206a:	d50a      	bpl.n	8022082 <_printf_i+0xce>
 802206c:	680e      	ldr	r6, [r1, #0]
 802206e:	602b      	str	r3, [r5, #0]
 8022070:	2e00      	cmp	r6, #0
 8022072:	da03      	bge.n	802207c <_printf_i+0xc8>
 8022074:	232d      	movs	r3, #45	; 0x2d
 8022076:	4276      	negs	r6, r6
 8022078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802207c:	485e      	ldr	r0, [pc, #376]	; (80221f8 <_printf_i+0x244>)
 802207e:	230a      	movs	r3, #10
 8022080:	e019      	b.n	80220b6 <_printf_i+0x102>
 8022082:	680e      	ldr	r6, [r1, #0]
 8022084:	602b      	str	r3, [r5, #0]
 8022086:	f010 0f40 	tst.w	r0, #64	; 0x40
 802208a:	bf18      	it	ne
 802208c:	b236      	sxthne	r6, r6
 802208e:	e7ef      	b.n	8022070 <_printf_i+0xbc>
 8022090:	682b      	ldr	r3, [r5, #0]
 8022092:	6820      	ldr	r0, [r4, #0]
 8022094:	1d19      	adds	r1, r3, #4
 8022096:	6029      	str	r1, [r5, #0]
 8022098:	0601      	lsls	r1, r0, #24
 802209a:	d501      	bpl.n	80220a0 <_printf_i+0xec>
 802209c:	681e      	ldr	r6, [r3, #0]
 802209e:	e002      	b.n	80220a6 <_printf_i+0xf2>
 80220a0:	0646      	lsls	r6, r0, #25
 80220a2:	d5fb      	bpl.n	802209c <_printf_i+0xe8>
 80220a4:	881e      	ldrh	r6, [r3, #0]
 80220a6:	4854      	ldr	r0, [pc, #336]	; (80221f8 <_printf_i+0x244>)
 80220a8:	2f6f      	cmp	r7, #111	; 0x6f
 80220aa:	bf0c      	ite	eq
 80220ac:	2308      	moveq	r3, #8
 80220ae:	230a      	movne	r3, #10
 80220b0:	2100      	movs	r1, #0
 80220b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80220b6:	6865      	ldr	r5, [r4, #4]
 80220b8:	60a5      	str	r5, [r4, #8]
 80220ba:	2d00      	cmp	r5, #0
 80220bc:	bfa2      	ittt	ge
 80220be:	6821      	ldrge	r1, [r4, #0]
 80220c0:	f021 0104 	bicge.w	r1, r1, #4
 80220c4:	6021      	strge	r1, [r4, #0]
 80220c6:	b90e      	cbnz	r6, 80220cc <_printf_i+0x118>
 80220c8:	2d00      	cmp	r5, #0
 80220ca:	d04d      	beq.n	8022168 <_printf_i+0x1b4>
 80220cc:	4615      	mov	r5, r2
 80220ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80220d2:	fb03 6711 	mls	r7, r3, r1, r6
 80220d6:	5dc7      	ldrb	r7, [r0, r7]
 80220d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80220dc:	4637      	mov	r7, r6
 80220de:	42bb      	cmp	r3, r7
 80220e0:	460e      	mov	r6, r1
 80220e2:	d9f4      	bls.n	80220ce <_printf_i+0x11a>
 80220e4:	2b08      	cmp	r3, #8
 80220e6:	d10b      	bne.n	8022100 <_printf_i+0x14c>
 80220e8:	6823      	ldr	r3, [r4, #0]
 80220ea:	07de      	lsls	r6, r3, #31
 80220ec:	d508      	bpl.n	8022100 <_printf_i+0x14c>
 80220ee:	6923      	ldr	r3, [r4, #16]
 80220f0:	6861      	ldr	r1, [r4, #4]
 80220f2:	4299      	cmp	r1, r3
 80220f4:	bfde      	ittt	le
 80220f6:	2330      	movle	r3, #48	; 0x30
 80220f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80220fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8022100:	1b52      	subs	r2, r2, r5
 8022102:	6122      	str	r2, [r4, #16]
 8022104:	f8cd a000 	str.w	sl, [sp]
 8022108:	464b      	mov	r3, r9
 802210a:	aa03      	add	r2, sp, #12
 802210c:	4621      	mov	r1, r4
 802210e:	4640      	mov	r0, r8
 8022110:	f7ff fee2 	bl	8021ed8 <_printf_common>
 8022114:	3001      	adds	r0, #1
 8022116:	d14c      	bne.n	80221b2 <_printf_i+0x1fe>
 8022118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802211c:	b004      	add	sp, #16
 802211e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022122:	4835      	ldr	r0, [pc, #212]	; (80221f8 <_printf_i+0x244>)
 8022124:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8022128:	6829      	ldr	r1, [r5, #0]
 802212a:	6823      	ldr	r3, [r4, #0]
 802212c:	f851 6b04 	ldr.w	r6, [r1], #4
 8022130:	6029      	str	r1, [r5, #0]
 8022132:	061d      	lsls	r5, r3, #24
 8022134:	d514      	bpl.n	8022160 <_printf_i+0x1ac>
 8022136:	07df      	lsls	r7, r3, #31
 8022138:	bf44      	itt	mi
 802213a:	f043 0320 	orrmi.w	r3, r3, #32
 802213e:	6023      	strmi	r3, [r4, #0]
 8022140:	b91e      	cbnz	r6, 802214a <_printf_i+0x196>
 8022142:	6823      	ldr	r3, [r4, #0]
 8022144:	f023 0320 	bic.w	r3, r3, #32
 8022148:	6023      	str	r3, [r4, #0]
 802214a:	2310      	movs	r3, #16
 802214c:	e7b0      	b.n	80220b0 <_printf_i+0xfc>
 802214e:	6823      	ldr	r3, [r4, #0]
 8022150:	f043 0320 	orr.w	r3, r3, #32
 8022154:	6023      	str	r3, [r4, #0]
 8022156:	2378      	movs	r3, #120	; 0x78
 8022158:	4828      	ldr	r0, [pc, #160]	; (80221fc <_printf_i+0x248>)
 802215a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802215e:	e7e3      	b.n	8022128 <_printf_i+0x174>
 8022160:	0659      	lsls	r1, r3, #25
 8022162:	bf48      	it	mi
 8022164:	b2b6      	uxthmi	r6, r6
 8022166:	e7e6      	b.n	8022136 <_printf_i+0x182>
 8022168:	4615      	mov	r5, r2
 802216a:	e7bb      	b.n	80220e4 <_printf_i+0x130>
 802216c:	682b      	ldr	r3, [r5, #0]
 802216e:	6826      	ldr	r6, [r4, #0]
 8022170:	6961      	ldr	r1, [r4, #20]
 8022172:	1d18      	adds	r0, r3, #4
 8022174:	6028      	str	r0, [r5, #0]
 8022176:	0635      	lsls	r5, r6, #24
 8022178:	681b      	ldr	r3, [r3, #0]
 802217a:	d501      	bpl.n	8022180 <_printf_i+0x1cc>
 802217c:	6019      	str	r1, [r3, #0]
 802217e:	e002      	b.n	8022186 <_printf_i+0x1d2>
 8022180:	0670      	lsls	r0, r6, #25
 8022182:	d5fb      	bpl.n	802217c <_printf_i+0x1c8>
 8022184:	8019      	strh	r1, [r3, #0]
 8022186:	2300      	movs	r3, #0
 8022188:	6123      	str	r3, [r4, #16]
 802218a:	4615      	mov	r5, r2
 802218c:	e7ba      	b.n	8022104 <_printf_i+0x150>
 802218e:	682b      	ldr	r3, [r5, #0]
 8022190:	1d1a      	adds	r2, r3, #4
 8022192:	602a      	str	r2, [r5, #0]
 8022194:	681d      	ldr	r5, [r3, #0]
 8022196:	6862      	ldr	r2, [r4, #4]
 8022198:	2100      	movs	r1, #0
 802219a:	4628      	mov	r0, r5
 802219c:	f7fe f818 	bl	80201d0 <memchr>
 80221a0:	b108      	cbz	r0, 80221a6 <_printf_i+0x1f2>
 80221a2:	1b40      	subs	r0, r0, r5
 80221a4:	6060      	str	r0, [r4, #4]
 80221a6:	6863      	ldr	r3, [r4, #4]
 80221a8:	6123      	str	r3, [r4, #16]
 80221aa:	2300      	movs	r3, #0
 80221ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80221b0:	e7a8      	b.n	8022104 <_printf_i+0x150>
 80221b2:	6923      	ldr	r3, [r4, #16]
 80221b4:	462a      	mov	r2, r5
 80221b6:	4649      	mov	r1, r9
 80221b8:	4640      	mov	r0, r8
 80221ba:	47d0      	blx	sl
 80221bc:	3001      	adds	r0, #1
 80221be:	d0ab      	beq.n	8022118 <_printf_i+0x164>
 80221c0:	6823      	ldr	r3, [r4, #0]
 80221c2:	079b      	lsls	r3, r3, #30
 80221c4:	d413      	bmi.n	80221ee <_printf_i+0x23a>
 80221c6:	68e0      	ldr	r0, [r4, #12]
 80221c8:	9b03      	ldr	r3, [sp, #12]
 80221ca:	4298      	cmp	r0, r3
 80221cc:	bfb8      	it	lt
 80221ce:	4618      	movlt	r0, r3
 80221d0:	e7a4      	b.n	802211c <_printf_i+0x168>
 80221d2:	2301      	movs	r3, #1
 80221d4:	4632      	mov	r2, r6
 80221d6:	4649      	mov	r1, r9
 80221d8:	4640      	mov	r0, r8
 80221da:	47d0      	blx	sl
 80221dc:	3001      	adds	r0, #1
 80221de:	d09b      	beq.n	8022118 <_printf_i+0x164>
 80221e0:	3501      	adds	r5, #1
 80221e2:	68e3      	ldr	r3, [r4, #12]
 80221e4:	9903      	ldr	r1, [sp, #12]
 80221e6:	1a5b      	subs	r3, r3, r1
 80221e8:	42ab      	cmp	r3, r5
 80221ea:	dcf2      	bgt.n	80221d2 <_printf_i+0x21e>
 80221ec:	e7eb      	b.n	80221c6 <_printf_i+0x212>
 80221ee:	2500      	movs	r5, #0
 80221f0:	f104 0619 	add.w	r6, r4, #25
 80221f4:	e7f5      	b.n	80221e2 <_printf_i+0x22e>
 80221f6:	bf00      	nop
 80221f8:	080228b5 	.word	0x080228b5
 80221fc:	080228c6 	.word	0x080228c6

08022200 <_sbrk_r>:
 8022200:	b538      	push	{r3, r4, r5, lr}
 8022202:	4d06      	ldr	r5, [pc, #24]	; (802221c <_sbrk_r+0x1c>)
 8022204:	2300      	movs	r3, #0
 8022206:	4604      	mov	r4, r0
 8022208:	4608      	mov	r0, r1
 802220a:	602b      	str	r3, [r5, #0]
 802220c:	f7fe fb4e 	bl	80208ac <_sbrk>
 8022210:	1c43      	adds	r3, r0, #1
 8022212:	d102      	bne.n	802221a <_sbrk_r+0x1a>
 8022214:	682b      	ldr	r3, [r5, #0]
 8022216:	b103      	cbz	r3, 802221a <_sbrk_r+0x1a>
 8022218:	6023      	str	r3, [r4, #0]
 802221a:	bd38      	pop	{r3, r4, r5, pc}
 802221c:	200000a0 	.word	0x200000a0

08022220 <__sread>:
 8022220:	b510      	push	{r4, lr}
 8022222:	460c      	mov	r4, r1
 8022224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022228:	f000 fab2 	bl	8022790 <_read_r>
 802222c:	2800      	cmp	r0, #0
 802222e:	bfab      	itete	ge
 8022230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022232:	89a3      	ldrhlt	r3, [r4, #12]
 8022234:	181b      	addge	r3, r3, r0
 8022236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802223a:	bfac      	ite	ge
 802223c:	6563      	strge	r3, [r4, #84]	; 0x54
 802223e:	81a3      	strhlt	r3, [r4, #12]
 8022240:	bd10      	pop	{r4, pc}

08022242 <__swrite>:
 8022242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022246:	461f      	mov	r7, r3
 8022248:	898b      	ldrh	r3, [r1, #12]
 802224a:	05db      	lsls	r3, r3, #23
 802224c:	4605      	mov	r5, r0
 802224e:	460c      	mov	r4, r1
 8022250:	4616      	mov	r6, r2
 8022252:	d505      	bpl.n	8022260 <__swrite+0x1e>
 8022254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022258:	2302      	movs	r3, #2
 802225a:	2200      	movs	r2, #0
 802225c:	f000 f9c8 	bl	80225f0 <_lseek_r>
 8022260:	89a3      	ldrh	r3, [r4, #12]
 8022262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802226a:	81a3      	strh	r3, [r4, #12]
 802226c:	4632      	mov	r2, r6
 802226e:	463b      	mov	r3, r7
 8022270:	4628      	mov	r0, r5
 8022272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022276:	f000 b869 	b.w	802234c <_write_r>

0802227a <__sseek>:
 802227a:	b510      	push	{r4, lr}
 802227c:	460c      	mov	r4, r1
 802227e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022282:	f000 f9b5 	bl	80225f0 <_lseek_r>
 8022286:	1c43      	adds	r3, r0, #1
 8022288:	89a3      	ldrh	r3, [r4, #12]
 802228a:	bf15      	itete	ne
 802228c:	6560      	strne	r0, [r4, #84]	; 0x54
 802228e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022296:	81a3      	strheq	r3, [r4, #12]
 8022298:	bf18      	it	ne
 802229a:	81a3      	strhne	r3, [r4, #12]
 802229c:	bd10      	pop	{r4, pc}

0802229e <__sclose>:
 802229e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80222a2:	f000 b8d3 	b.w	802244c <_close_r>
	...

080222a8 <__swbuf_r>:
 80222a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222aa:	460e      	mov	r6, r1
 80222ac:	4614      	mov	r4, r2
 80222ae:	4605      	mov	r5, r0
 80222b0:	b118      	cbz	r0, 80222ba <__swbuf_r+0x12>
 80222b2:	6983      	ldr	r3, [r0, #24]
 80222b4:	b90b      	cbnz	r3, 80222ba <__swbuf_r+0x12>
 80222b6:	f7ff fb81 	bl	80219bc <__sinit>
 80222ba:	4b21      	ldr	r3, [pc, #132]	; (8022340 <__swbuf_r+0x98>)
 80222bc:	429c      	cmp	r4, r3
 80222be:	d12b      	bne.n	8022318 <__swbuf_r+0x70>
 80222c0:	686c      	ldr	r4, [r5, #4]
 80222c2:	69a3      	ldr	r3, [r4, #24]
 80222c4:	60a3      	str	r3, [r4, #8]
 80222c6:	89a3      	ldrh	r3, [r4, #12]
 80222c8:	071a      	lsls	r2, r3, #28
 80222ca:	d52f      	bpl.n	802232c <__swbuf_r+0x84>
 80222cc:	6923      	ldr	r3, [r4, #16]
 80222ce:	b36b      	cbz	r3, 802232c <__swbuf_r+0x84>
 80222d0:	6923      	ldr	r3, [r4, #16]
 80222d2:	6820      	ldr	r0, [r4, #0]
 80222d4:	1ac0      	subs	r0, r0, r3
 80222d6:	6963      	ldr	r3, [r4, #20]
 80222d8:	b2f6      	uxtb	r6, r6
 80222da:	4283      	cmp	r3, r0
 80222dc:	4637      	mov	r7, r6
 80222de:	dc04      	bgt.n	80222ea <__swbuf_r+0x42>
 80222e0:	4621      	mov	r1, r4
 80222e2:	4628      	mov	r0, r5
 80222e4:	f000 f948 	bl	8022578 <_fflush_r>
 80222e8:	bb30      	cbnz	r0, 8022338 <__swbuf_r+0x90>
 80222ea:	68a3      	ldr	r3, [r4, #8]
 80222ec:	3b01      	subs	r3, #1
 80222ee:	60a3      	str	r3, [r4, #8]
 80222f0:	6823      	ldr	r3, [r4, #0]
 80222f2:	1c5a      	adds	r2, r3, #1
 80222f4:	6022      	str	r2, [r4, #0]
 80222f6:	701e      	strb	r6, [r3, #0]
 80222f8:	6963      	ldr	r3, [r4, #20]
 80222fa:	3001      	adds	r0, #1
 80222fc:	4283      	cmp	r3, r0
 80222fe:	d004      	beq.n	802230a <__swbuf_r+0x62>
 8022300:	89a3      	ldrh	r3, [r4, #12]
 8022302:	07db      	lsls	r3, r3, #31
 8022304:	d506      	bpl.n	8022314 <__swbuf_r+0x6c>
 8022306:	2e0a      	cmp	r6, #10
 8022308:	d104      	bne.n	8022314 <__swbuf_r+0x6c>
 802230a:	4621      	mov	r1, r4
 802230c:	4628      	mov	r0, r5
 802230e:	f000 f933 	bl	8022578 <_fflush_r>
 8022312:	b988      	cbnz	r0, 8022338 <__swbuf_r+0x90>
 8022314:	4638      	mov	r0, r7
 8022316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022318:	4b0a      	ldr	r3, [pc, #40]	; (8022344 <__swbuf_r+0x9c>)
 802231a:	429c      	cmp	r4, r3
 802231c:	d101      	bne.n	8022322 <__swbuf_r+0x7a>
 802231e:	68ac      	ldr	r4, [r5, #8]
 8022320:	e7cf      	b.n	80222c2 <__swbuf_r+0x1a>
 8022322:	4b09      	ldr	r3, [pc, #36]	; (8022348 <__swbuf_r+0xa0>)
 8022324:	429c      	cmp	r4, r3
 8022326:	bf08      	it	eq
 8022328:	68ec      	ldreq	r4, [r5, #12]
 802232a:	e7ca      	b.n	80222c2 <__swbuf_r+0x1a>
 802232c:	4621      	mov	r1, r4
 802232e:	4628      	mov	r0, r5
 8022330:	f000 f81e 	bl	8022370 <__swsetup_r>
 8022334:	2800      	cmp	r0, #0
 8022336:	d0cb      	beq.n	80222d0 <__swbuf_r+0x28>
 8022338:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802233c:	e7ea      	b.n	8022314 <__swbuf_r+0x6c>
 802233e:	bf00      	nop
 8022340:	08022864 	.word	0x08022864
 8022344:	08022884 	.word	0x08022884
 8022348:	08022844 	.word	0x08022844

0802234c <_write_r>:
 802234c:	b538      	push	{r3, r4, r5, lr}
 802234e:	4d07      	ldr	r5, [pc, #28]	; (802236c <_write_r+0x20>)
 8022350:	4604      	mov	r4, r0
 8022352:	4608      	mov	r0, r1
 8022354:	4611      	mov	r1, r2
 8022356:	2200      	movs	r2, #0
 8022358:	602a      	str	r2, [r5, #0]
 802235a:	461a      	mov	r2, r3
 802235c:	f7fe fa55 	bl	802080a <_write>
 8022360:	1c43      	adds	r3, r0, #1
 8022362:	d102      	bne.n	802236a <_write_r+0x1e>
 8022364:	682b      	ldr	r3, [r5, #0]
 8022366:	b103      	cbz	r3, 802236a <_write_r+0x1e>
 8022368:	6023      	str	r3, [r4, #0]
 802236a:	bd38      	pop	{r3, r4, r5, pc}
 802236c:	200000a0 	.word	0x200000a0

08022370 <__swsetup_r>:
 8022370:	4b32      	ldr	r3, [pc, #200]	; (802243c <__swsetup_r+0xcc>)
 8022372:	b570      	push	{r4, r5, r6, lr}
 8022374:	681d      	ldr	r5, [r3, #0]
 8022376:	4606      	mov	r6, r0
 8022378:	460c      	mov	r4, r1
 802237a:	b125      	cbz	r5, 8022386 <__swsetup_r+0x16>
 802237c:	69ab      	ldr	r3, [r5, #24]
 802237e:	b913      	cbnz	r3, 8022386 <__swsetup_r+0x16>
 8022380:	4628      	mov	r0, r5
 8022382:	f7ff fb1b 	bl	80219bc <__sinit>
 8022386:	4b2e      	ldr	r3, [pc, #184]	; (8022440 <__swsetup_r+0xd0>)
 8022388:	429c      	cmp	r4, r3
 802238a:	d10f      	bne.n	80223ac <__swsetup_r+0x3c>
 802238c:	686c      	ldr	r4, [r5, #4]
 802238e:	89a3      	ldrh	r3, [r4, #12]
 8022390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022394:	0719      	lsls	r1, r3, #28
 8022396:	d42c      	bmi.n	80223f2 <__swsetup_r+0x82>
 8022398:	06dd      	lsls	r5, r3, #27
 802239a:	d411      	bmi.n	80223c0 <__swsetup_r+0x50>
 802239c:	2309      	movs	r3, #9
 802239e:	6033      	str	r3, [r6, #0]
 80223a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80223a4:	81a3      	strh	r3, [r4, #12]
 80223a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80223aa:	e03e      	b.n	802242a <__swsetup_r+0xba>
 80223ac:	4b25      	ldr	r3, [pc, #148]	; (8022444 <__swsetup_r+0xd4>)
 80223ae:	429c      	cmp	r4, r3
 80223b0:	d101      	bne.n	80223b6 <__swsetup_r+0x46>
 80223b2:	68ac      	ldr	r4, [r5, #8]
 80223b4:	e7eb      	b.n	802238e <__swsetup_r+0x1e>
 80223b6:	4b24      	ldr	r3, [pc, #144]	; (8022448 <__swsetup_r+0xd8>)
 80223b8:	429c      	cmp	r4, r3
 80223ba:	bf08      	it	eq
 80223bc:	68ec      	ldreq	r4, [r5, #12]
 80223be:	e7e6      	b.n	802238e <__swsetup_r+0x1e>
 80223c0:	0758      	lsls	r0, r3, #29
 80223c2:	d512      	bpl.n	80223ea <__swsetup_r+0x7a>
 80223c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80223c6:	b141      	cbz	r1, 80223da <__swsetup_r+0x6a>
 80223c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80223cc:	4299      	cmp	r1, r3
 80223ce:	d002      	beq.n	80223d6 <__swsetup_r+0x66>
 80223d0:	4630      	mov	r0, r6
 80223d2:	f000 f991 	bl	80226f8 <_free_r>
 80223d6:	2300      	movs	r3, #0
 80223d8:	6363      	str	r3, [r4, #52]	; 0x34
 80223da:	89a3      	ldrh	r3, [r4, #12]
 80223dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80223e0:	81a3      	strh	r3, [r4, #12]
 80223e2:	2300      	movs	r3, #0
 80223e4:	6063      	str	r3, [r4, #4]
 80223e6:	6923      	ldr	r3, [r4, #16]
 80223e8:	6023      	str	r3, [r4, #0]
 80223ea:	89a3      	ldrh	r3, [r4, #12]
 80223ec:	f043 0308 	orr.w	r3, r3, #8
 80223f0:	81a3      	strh	r3, [r4, #12]
 80223f2:	6923      	ldr	r3, [r4, #16]
 80223f4:	b94b      	cbnz	r3, 802240a <__swsetup_r+0x9a>
 80223f6:	89a3      	ldrh	r3, [r4, #12]
 80223f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80223fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022400:	d003      	beq.n	802240a <__swsetup_r+0x9a>
 8022402:	4621      	mov	r1, r4
 8022404:	4630      	mov	r0, r6
 8022406:	f000 f92b 	bl	8022660 <__smakebuf_r>
 802240a:	89a0      	ldrh	r0, [r4, #12]
 802240c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022410:	f010 0301 	ands.w	r3, r0, #1
 8022414:	d00a      	beq.n	802242c <__swsetup_r+0xbc>
 8022416:	2300      	movs	r3, #0
 8022418:	60a3      	str	r3, [r4, #8]
 802241a:	6963      	ldr	r3, [r4, #20]
 802241c:	425b      	negs	r3, r3
 802241e:	61a3      	str	r3, [r4, #24]
 8022420:	6923      	ldr	r3, [r4, #16]
 8022422:	b943      	cbnz	r3, 8022436 <__swsetup_r+0xc6>
 8022424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022428:	d1ba      	bne.n	80223a0 <__swsetup_r+0x30>
 802242a:	bd70      	pop	{r4, r5, r6, pc}
 802242c:	0781      	lsls	r1, r0, #30
 802242e:	bf58      	it	pl
 8022430:	6963      	ldrpl	r3, [r4, #20]
 8022432:	60a3      	str	r3, [r4, #8]
 8022434:	e7f4      	b.n	8022420 <__swsetup_r+0xb0>
 8022436:	2000      	movs	r0, #0
 8022438:	e7f7      	b.n	802242a <__swsetup_r+0xba>
 802243a:	bf00      	nop
 802243c:	2000000c 	.word	0x2000000c
 8022440:	08022864 	.word	0x08022864
 8022444:	08022884 	.word	0x08022884
 8022448:	08022844 	.word	0x08022844

0802244c <_close_r>:
 802244c:	b538      	push	{r3, r4, r5, lr}
 802244e:	4d06      	ldr	r5, [pc, #24]	; (8022468 <_close_r+0x1c>)
 8022450:	2300      	movs	r3, #0
 8022452:	4604      	mov	r4, r0
 8022454:	4608      	mov	r0, r1
 8022456:	602b      	str	r3, [r5, #0]
 8022458:	f7fe f9f3 	bl	8020842 <_close>
 802245c:	1c43      	adds	r3, r0, #1
 802245e:	d102      	bne.n	8022466 <_close_r+0x1a>
 8022460:	682b      	ldr	r3, [r5, #0]
 8022462:	b103      	cbz	r3, 8022466 <_close_r+0x1a>
 8022464:	6023      	str	r3, [r4, #0]
 8022466:	bd38      	pop	{r3, r4, r5, pc}
 8022468:	200000a0 	.word	0x200000a0

0802246c <__sflush_r>:
 802246c:	898a      	ldrh	r2, [r1, #12]
 802246e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022472:	4605      	mov	r5, r0
 8022474:	0710      	lsls	r0, r2, #28
 8022476:	460c      	mov	r4, r1
 8022478:	d458      	bmi.n	802252c <__sflush_r+0xc0>
 802247a:	684b      	ldr	r3, [r1, #4]
 802247c:	2b00      	cmp	r3, #0
 802247e:	dc05      	bgt.n	802248c <__sflush_r+0x20>
 8022480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022482:	2b00      	cmp	r3, #0
 8022484:	dc02      	bgt.n	802248c <__sflush_r+0x20>
 8022486:	2000      	movs	r0, #0
 8022488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802248c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802248e:	2e00      	cmp	r6, #0
 8022490:	d0f9      	beq.n	8022486 <__sflush_r+0x1a>
 8022492:	2300      	movs	r3, #0
 8022494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022498:	682f      	ldr	r7, [r5, #0]
 802249a:	602b      	str	r3, [r5, #0]
 802249c:	d032      	beq.n	8022504 <__sflush_r+0x98>
 802249e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80224a0:	89a3      	ldrh	r3, [r4, #12]
 80224a2:	075a      	lsls	r2, r3, #29
 80224a4:	d505      	bpl.n	80224b2 <__sflush_r+0x46>
 80224a6:	6863      	ldr	r3, [r4, #4]
 80224a8:	1ac0      	subs	r0, r0, r3
 80224aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80224ac:	b10b      	cbz	r3, 80224b2 <__sflush_r+0x46>
 80224ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80224b0:	1ac0      	subs	r0, r0, r3
 80224b2:	2300      	movs	r3, #0
 80224b4:	4602      	mov	r2, r0
 80224b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80224b8:	6a21      	ldr	r1, [r4, #32]
 80224ba:	4628      	mov	r0, r5
 80224bc:	47b0      	blx	r6
 80224be:	1c43      	adds	r3, r0, #1
 80224c0:	89a3      	ldrh	r3, [r4, #12]
 80224c2:	d106      	bne.n	80224d2 <__sflush_r+0x66>
 80224c4:	6829      	ldr	r1, [r5, #0]
 80224c6:	291d      	cmp	r1, #29
 80224c8:	d82c      	bhi.n	8022524 <__sflush_r+0xb8>
 80224ca:	4a2a      	ldr	r2, [pc, #168]	; (8022574 <__sflush_r+0x108>)
 80224cc:	40ca      	lsrs	r2, r1
 80224ce:	07d6      	lsls	r6, r2, #31
 80224d0:	d528      	bpl.n	8022524 <__sflush_r+0xb8>
 80224d2:	2200      	movs	r2, #0
 80224d4:	6062      	str	r2, [r4, #4]
 80224d6:	04d9      	lsls	r1, r3, #19
 80224d8:	6922      	ldr	r2, [r4, #16]
 80224da:	6022      	str	r2, [r4, #0]
 80224dc:	d504      	bpl.n	80224e8 <__sflush_r+0x7c>
 80224de:	1c42      	adds	r2, r0, #1
 80224e0:	d101      	bne.n	80224e6 <__sflush_r+0x7a>
 80224e2:	682b      	ldr	r3, [r5, #0]
 80224e4:	b903      	cbnz	r3, 80224e8 <__sflush_r+0x7c>
 80224e6:	6560      	str	r0, [r4, #84]	; 0x54
 80224e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80224ea:	602f      	str	r7, [r5, #0]
 80224ec:	2900      	cmp	r1, #0
 80224ee:	d0ca      	beq.n	8022486 <__sflush_r+0x1a>
 80224f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80224f4:	4299      	cmp	r1, r3
 80224f6:	d002      	beq.n	80224fe <__sflush_r+0x92>
 80224f8:	4628      	mov	r0, r5
 80224fa:	f000 f8fd 	bl	80226f8 <_free_r>
 80224fe:	2000      	movs	r0, #0
 8022500:	6360      	str	r0, [r4, #52]	; 0x34
 8022502:	e7c1      	b.n	8022488 <__sflush_r+0x1c>
 8022504:	6a21      	ldr	r1, [r4, #32]
 8022506:	2301      	movs	r3, #1
 8022508:	4628      	mov	r0, r5
 802250a:	47b0      	blx	r6
 802250c:	1c41      	adds	r1, r0, #1
 802250e:	d1c7      	bne.n	80224a0 <__sflush_r+0x34>
 8022510:	682b      	ldr	r3, [r5, #0]
 8022512:	2b00      	cmp	r3, #0
 8022514:	d0c4      	beq.n	80224a0 <__sflush_r+0x34>
 8022516:	2b1d      	cmp	r3, #29
 8022518:	d001      	beq.n	802251e <__sflush_r+0xb2>
 802251a:	2b16      	cmp	r3, #22
 802251c:	d101      	bne.n	8022522 <__sflush_r+0xb6>
 802251e:	602f      	str	r7, [r5, #0]
 8022520:	e7b1      	b.n	8022486 <__sflush_r+0x1a>
 8022522:	89a3      	ldrh	r3, [r4, #12]
 8022524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022528:	81a3      	strh	r3, [r4, #12]
 802252a:	e7ad      	b.n	8022488 <__sflush_r+0x1c>
 802252c:	690f      	ldr	r7, [r1, #16]
 802252e:	2f00      	cmp	r7, #0
 8022530:	d0a9      	beq.n	8022486 <__sflush_r+0x1a>
 8022532:	0793      	lsls	r3, r2, #30
 8022534:	680e      	ldr	r6, [r1, #0]
 8022536:	bf08      	it	eq
 8022538:	694b      	ldreq	r3, [r1, #20]
 802253a:	600f      	str	r7, [r1, #0]
 802253c:	bf18      	it	ne
 802253e:	2300      	movne	r3, #0
 8022540:	eba6 0807 	sub.w	r8, r6, r7
 8022544:	608b      	str	r3, [r1, #8]
 8022546:	f1b8 0f00 	cmp.w	r8, #0
 802254a:	dd9c      	ble.n	8022486 <__sflush_r+0x1a>
 802254c:	6a21      	ldr	r1, [r4, #32]
 802254e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022550:	4643      	mov	r3, r8
 8022552:	463a      	mov	r2, r7
 8022554:	4628      	mov	r0, r5
 8022556:	47b0      	blx	r6
 8022558:	2800      	cmp	r0, #0
 802255a:	dc06      	bgt.n	802256a <__sflush_r+0xfe>
 802255c:	89a3      	ldrh	r3, [r4, #12]
 802255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022562:	81a3      	strh	r3, [r4, #12]
 8022564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022568:	e78e      	b.n	8022488 <__sflush_r+0x1c>
 802256a:	4407      	add	r7, r0
 802256c:	eba8 0800 	sub.w	r8, r8, r0
 8022570:	e7e9      	b.n	8022546 <__sflush_r+0xda>
 8022572:	bf00      	nop
 8022574:	20400001 	.word	0x20400001

08022578 <_fflush_r>:
 8022578:	b538      	push	{r3, r4, r5, lr}
 802257a:	690b      	ldr	r3, [r1, #16]
 802257c:	4605      	mov	r5, r0
 802257e:	460c      	mov	r4, r1
 8022580:	b913      	cbnz	r3, 8022588 <_fflush_r+0x10>
 8022582:	2500      	movs	r5, #0
 8022584:	4628      	mov	r0, r5
 8022586:	bd38      	pop	{r3, r4, r5, pc}
 8022588:	b118      	cbz	r0, 8022592 <_fflush_r+0x1a>
 802258a:	6983      	ldr	r3, [r0, #24]
 802258c:	b90b      	cbnz	r3, 8022592 <_fflush_r+0x1a>
 802258e:	f7ff fa15 	bl	80219bc <__sinit>
 8022592:	4b14      	ldr	r3, [pc, #80]	; (80225e4 <_fflush_r+0x6c>)
 8022594:	429c      	cmp	r4, r3
 8022596:	d11b      	bne.n	80225d0 <_fflush_r+0x58>
 8022598:	686c      	ldr	r4, [r5, #4]
 802259a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802259e:	2b00      	cmp	r3, #0
 80225a0:	d0ef      	beq.n	8022582 <_fflush_r+0xa>
 80225a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80225a4:	07d0      	lsls	r0, r2, #31
 80225a6:	d404      	bmi.n	80225b2 <_fflush_r+0x3a>
 80225a8:	0599      	lsls	r1, r3, #22
 80225aa:	d402      	bmi.n	80225b2 <_fflush_r+0x3a>
 80225ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80225ae:	f7ff faa3 	bl	8021af8 <__retarget_lock_acquire_recursive>
 80225b2:	4628      	mov	r0, r5
 80225b4:	4621      	mov	r1, r4
 80225b6:	f7ff ff59 	bl	802246c <__sflush_r>
 80225ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80225bc:	07da      	lsls	r2, r3, #31
 80225be:	4605      	mov	r5, r0
 80225c0:	d4e0      	bmi.n	8022584 <_fflush_r+0xc>
 80225c2:	89a3      	ldrh	r3, [r4, #12]
 80225c4:	059b      	lsls	r3, r3, #22
 80225c6:	d4dd      	bmi.n	8022584 <_fflush_r+0xc>
 80225c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80225ca:	f7ff fa96 	bl	8021afa <__retarget_lock_release_recursive>
 80225ce:	e7d9      	b.n	8022584 <_fflush_r+0xc>
 80225d0:	4b05      	ldr	r3, [pc, #20]	; (80225e8 <_fflush_r+0x70>)
 80225d2:	429c      	cmp	r4, r3
 80225d4:	d101      	bne.n	80225da <_fflush_r+0x62>
 80225d6:	68ac      	ldr	r4, [r5, #8]
 80225d8:	e7df      	b.n	802259a <_fflush_r+0x22>
 80225da:	4b04      	ldr	r3, [pc, #16]	; (80225ec <_fflush_r+0x74>)
 80225dc:	429c      	cmp	r4, r3
 80225de:	bf08      	it	eq
 80225e0:	68ec      	ldreq	r4, [r5, #12]
 80225e2:	e7da      	b.n	802259a <_fflush_r+0x22>
 80225e4:	08022864 	.word	0x08022864
 80225e8:	08022884 	.word	0x08022884
 80225ec:	08022844 	.word	0x08022844

080225f0 <_lseek_r>:
 80225f0:	b538      	push	{r3, r4, r5, lr}
 80225f2:	4d07      	ldr	r5, [pc, #28]	; (8022610 <_lseek_r+0x20>)
 80225f4:	4604      	mov	r4, r0
 80225f6:	4608      	mov	r0, r1
 80225f8:	4611      	mov	r1, r2
 80225fa:	2200      	movs	r2, #0
 80225fc:	602a      	str	r2, [r5, #0]
 80225fe:	461a      	mov	r2, r3
 8022600:	f7fe f946 	bl	8020890 <_lseek>
 8022604:	1c43      	adds	r3, r0, #1
 8022606:	d102      	bne.n	802260e <_lseek_r+0x1e>
 8022608:	682b      	ldr	r3, [r5, #0]
 802260a:	b103      	cbz	r3, 802260e <_lseek_r+0x1e>
 802260c:	6023      	str	r3, [r4, #0]
 802260e:	bd38      	pop	{r3, r4, r5, pc}
 8022610:	200000a0 	.word	0x200000a0

08022614 <__swhatbuf_r>:
 8022614:	b570      	push	{r4, r5, r6, lr}
 8022616:	460e      	mov	r6, r1
 8022618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802261c:	2900      	cmp	r1, #0
 802261e:	b096      	sub	sp, #88	; 0x58
 8022620:	4614      	mov	r4, r2
 8022622:	461d      	mov	r5, r3
 8022624:	da08      	bge.n	8022638 <__swhatbuf_r+0x24>
 8022626:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802262a:	2200      	movs	r2, #0
 802262c:	602a      	str	r2, [r5, #0]
 802262e:	061a      	lsls	r2, r3, #24
 8022630:	d410      	bmi.n	8022654 <__swhatbuf_r+0x40>
 8022632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022636:	e00e      	b.n	8022656 <__swhatbuf_r+0x42>
 8022638:	466a      	mov	r2, sp
 802263a:	f000 f8bb 	bl	80227b4 <_fstat_r>
 802263e:	2800      	cmp	r0, #0
 8022640:	dbf1      	blt.n	8022626 <__swhatbuf_r+0x12>
 8022642:	9a01      	ldr	r2, [sp, #4]
 8022644:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022648:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802264c:	425a      	negs	r2, r3
 802264e:	415a      	adcs	r2, r3
 8022650:	602a      	str	r2, [r5, #0]
 8022652:	e7ee      	b.n	8022632 <__swhatbuf_r+0x1e>
 8022654:	2340      	movs	r3, #64	; 0x40
 8022656:	2000      	movs	r0, #0
 8022658:	6023      	str	r3, [r4, #0]
 802265a:	b016      	add	sp, #88	; 0x58
 802265c:	bd70      	pop	{r4, r5, r6, pc}
	...

08022660 <__smakebuf_r>:
 8022660:	898b      	ldrh	r3, [r1, #12]
 8022662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022664:	079d      	lsls	r5, r3, #30
 8022666:	4606      	mov	r6, r0
 8022668:	460c      	mov	r4, r1
 802266a:	d507      	bpl.n	802267c <__smakebuf_r+0x1c>
 802266c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022670:	6023      	str	r3, [r4, #0]
 8022672:	6123      	str	r3, [r4, #16]
 8022674:	2301      	movs	r3, #1
 8022676:	6163      	str	r3, [r4, #20]
 8022678:	b002      	add	sp, #8
 802267a:	bd70      	pop	{r4, r5, r6, pc}
 802267c:	ab01      	add	r3, sp, #4
 802267e:	466a      	mov	r2, sp
 8022680:	f7ff ffc8 	bl	8022614 <__swhatbuf_r>
 8022684:	9900      	ldr	r1, [sp, #0]
 8022686:	4605      	mov	r5, r0
 8022688:	4630      	mov	r0, r6
 802268a:	f7ff fa57 	bl	8021b3c <_malloc_r>
 802268e:	b948      	cbnz	r0, 80226a4 <__smakebuf_r+0x44>
 8022690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022694:	059a      	lsls	r2, r3, #22
 8022696:	d4ef      	bmi.n	8022678 <__smakebuf_r+0x18>
 8022698:	f023 0303 	bic.w	r3, r3, #3
 802269c:	f043 0302 	orr.w	r3, r3, #2
 80226a0:	81a3      	strh	r3, [r4, #12]
 80226a2:	e7e3      	b.n	802266c <__smakebuf_r+0xc>
 80226a4:	4b0d      	ldr	r3, [pc, #52]	; (80226dc <__smakebuf_r+0x7c>)
 80226a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80226a8:	89a3      	ldrh	r3, [r4, #12]
 80226aa:	6020      	str	r0, [r4, #0]
 80226ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80226b0:	81a3      	strh	r3, [r4, #12]
 80226b2:	9b00      	ldr	r3, [sp, #0]
 80226b4:	6163      	str	r3, [r4, #20]
 80226b6:	9b01      	ldr	r3, [sp, #4]
 80226b8:	6120      	str	r0, [r4, #16]
 80226ba:	b15b      	cbz	r3, 80226d4 <__smakebuf_r+0x74>
 80226bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80226c0:	4630      	mov	r0, r6
 80226c2:	f000 f889 	bl	80227d8 <_isatty_r>
 80226c6:	b128      	cbz	r0, 80226d4 <__smakebuf_r+0x74>
 80226c8:	89a3      	ldrh	r3, [r4, #12]
 80226ca:	f023 0303 	bic.w	r3, r3, #3
 80226ce:	f043 0301 	orr.w	r3, r3, #1
 80226d2:	81a3      	strh	r3, [r4, #12]
 80226d4:	89a0      	ldrh	r0, [r4, #12]
 80226d6:	4305      	orrs	r5, r0
 80226d8:	81a5      	strh	r5, [r4, #12]
 80226da:	e7cd      	b.n	8022678 <__smakebuf_r+0x18>
 80226dc:	08021955 	.word	0x08021955

080226e0 <__malloc_lock>:
 80226e0:	4801      	ldr	r0, [pc, #4]	; (80226e8 <__malloc_lock+0x8>)
 80226e2:	f7ff ba09 	b.w	8021af8 <__retarget_lock_acquire_recursive>
 80226e6:	bf00      	nop
 80226e8:	20000094 	.word	0x20000094

080226ec <__malloc_unlock>:
 80226ec:	4801      	ldr	r0, [pc, #4]	; (80226f4 <__malloc_unlock+0x8>)
 80226ee:	f7ff ba04 	b.w	8021afa <__retarget_lock_release_recursive>
 80226f2:	bf00      	nop
 80226f4:	20000094 	.word	0x20000094

080226f8 <_free_r>:
 80226f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80226fa:	2900      	cmp	r1, #0
 80226fc:	d044      	beq.n	8022788 <_free_r+0x90>
 80226fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022702:	9001      	str	r0, [sp, #4]
 8022704:	2b00      	cmp	r3, #0
 8022706:	f1a1 0404 	sub.w	r4, r1, #4
 802270a:	bfb8      	it	lt
 802270c:	18e4      	addlt	r4, r4, r3
 802270e:	f7ff ffe7 	bl	80226e0 <__malloc_lock>
 8022712:	4a1e      	ldr	r2, [pc, #120]	; (802278c <_free_r+0x94>)
 8022714:	9801      	ldr	r0, [sp, #4]
 8022716:	6813      	ldr	r3, [r2, #0]
 8022718:	b933      	cbnz	r3, 8022728 <_free_r+0x30>
 802271a:	6063      	str	r3, [r4, #4]
 802271c:	6014      	str	r4, [r2, #0]
 802271e:	b003      	add	sp, #12
 8022720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022724:	f7ff bfe2 	b.w	80226ec <__malloc_unlock>
 8022728:	42a3      	cmp	r3, r4
 802272a:	d908      	bls.n	802273e <_free_r+0x46>
 802272c:	6825      	ldr	r5, [r4, #0]
 802272e:	1961      	adds	r1, r4, r5
 8022730:	428b      	cmp	r3, r1
 8022732:	bf01      	itttt	eq
 8022734:	6819      	ldreq	r1, [r3, #0]
 8022736:	685b      	ldreq	r3, [r3, #4]
 8022738:	1949      	addeq	r1, r1, r5
 802273a:	6021      	streq	r1, [r4, #0]
 802273c:	e7ed      	b.n	802271a <_free_r+0x22>
 802273e:	461a      	mov	r2, r3
 8022740:	685b      	ldr	r3, [r3, #4]
 8022742:	b10b      	cbz	r3, 8022748 <_free_r+0x50>
 8022744:	42a3      	cmp	r3, r4
 8022746:	d9fa      	bls.n	802273e <_free_r+0x46>
 8022748:	6811      	ldr	r1, [r2, #0]
 802274a:	1855      	adds	r5, r2, r1
 802274c:	42a5      	cmp	r5, r4
 802274e:	d10b      	bne.n	8022768 <_free_r+0x70>
 8022750:	6824      	ldr	r4, [r4, #0]
 8022752:	4421      	add	r1, r4
 8022754:	1854      	adds	r4, r2, r1
 8022756:	42a3      	cmp	r3, r4
 8022758:	6011      	str	r1, [r2, #0]
 802275a:	d1e0      	bne.n	802271e <_free_r+0x26>
 802275c:	681c      	ldr	r4, [r3, #0]
 802275e:	685b      	ldr	r3, [r3, #4]
 8022760:	6053      	str	r3, [r2, #4]
 8022762:	4421      	add	r1, r4
 8022764:	6011      	str	r1, [r2, #0]
 8022766:	e7da      	b.n	802271e <_free_r+0x26>
 8022768:	d902      	bls.n	8022770 <_free_r+0x78>
 802276a:	230c      	movs	r3, #12
 802276c:	6003      	str	r3, [r0, #0]
 802276e:	e7d6      	b.n	802271e <_free_r+0x26>
 8022770:	6825      	ldr	r5, [r4, #0]
 8022772:	1961      	adds	r1, r4, r5
 8022774:	428b      	cmp	r3, r1
 8022776:	bf04      	itt	eq
 8022778:	6819      	ldreq	r1, [r3, #0]
 802277a:	685b      	ldreq	r3, [r3, #4]
 802277c:	6063      	str	r3, [r4, #4]
 802277e:	bf04      	itt	eq
 8022780:	1949      	addeq	r1, r1, r5
 8022782:	6021      	streq	r1, [r4, #0]
 8022784:	6054      	str	r4, [r2, #4]
 8022786:	e7ca      	b.n	802271e <_free_r+0x26>
 8022788:	b003      	add	sp, #12
 802278a:	bd30      	pop	{r4, r5, pc}
 802278c:	20000098 	.word	0x20000098

08022790 <_read_r>:
 8022790:	b538      	push	{r3, r4, r5, lr}
 8022792:	4d07      	ldr	r5, [pc, #28]	; (80227b0 <_read_r+0x20>)
 8022794:	4604      	mov	r4, r0
 8022796:	4608      	mov	r0, r1
 8022798:	4611      	mov	r1, r2
 802279a:	2200      	movs	r2, #0
 802279c:	602a      	str	r2, [r5, #0]
 802279e:	461a      	mov	r2, r3
 80227a0:	f7fe f816 	bl	80207d0 <_read>
 80227a4:	1c43      	adds	r3, r0, #1
 80227a6:	d102      	bne.n	80227ae <_read_r+0x1e>
 80227a8:	682b      	ldr	r3, [r5, #0]
 80227aa:	b103      	cbz	r3, 80227ae <_read_r+0x1e>
 80227ac:	6023      	str	r3, [r4, #0]
 80227ae:	bd38      	pop	{r3, r4, r5, pc}
 80227b0:	200000a0 	.word	0x200000a0

080227b4 <_fstat_r>:
 80227b4:	b538      	push	{r3, r4, r5, lr}
 80227b6:	4d07      	ldr	r5, [pc, #28]	; (80227d4 <_fstat_r+0x20>)
 80227b8:	2300      	movs	r3, #0
 80227ba:	4604      	mov	r4, r0
 80227bc:	4608      	mov	r0, r1
 80227be:	4611      	mov	r1, r2
 80227c0:	602b      	str	r3, [r5, #0]
 80227c2:	f7fe f84a 	bl	802085a <_fstat>
 80227c6:	1c43      	adds	r3, r0, #1
 80227c8:	d102      	bne.n	80227d0 <_fstat_r+0x1c>
 80227ca:	682b      	ldr	r3, [r5, #0]
 80227cc:	b103      	cbz	r3, 80227d0 <_fstat_r+0x1c>
 80227ce:	6023      	str	r3, [r4, #0]
 80227d0:	bd38      	pop	{r3, r4, r5, pc}
 80227d2:	bf00      	nop
 80227d4:	200000a0 	.word	0x200000a0

080227d8 <_isatty_r>:
 80227d8:	b538      	push	{r3, r4, r5, lr}
 80227da:	4d06      	ldr	r5, [pc, #24]	; (80227f4 <_isatty_r+0x1c>)
 80227dc:	2300      	movs	r3, #0
 80227de:	4604      	mov	r4, r0
 80227e0:	4608      	mov	r0, r1
 80227e2:	602b      	str	r3, [r5, #0]
 80227e4:	f7fe f849 	bl	802087a <_isatty>
 80227e8:	1c43      	adds	r3, r0, #1
 80227ea:	d102      	bne.n	80227f2 <_isatty_r+0x1a>
 80227ec:	682b      	ldr	r3, [r5, #0]
 80227ee:	b103      	cbz	r3, 80227f2 <_isatty_r+0x1a>
 80227f0:	6023      	str	r3, [r4, #0]
 80227f2:	bd38      	pop	{r3, r4, r5, pc}
 80227f4:	200000a0 	.word	0x200000a0

080227f8 <_init>:
 80227f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227fa:	bf00      	nop
 80227fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80227fe:	bc08      	pop	{r3}
 8022800:	469e      	mov	lr, r3
 8022802:	4770      	bx	lr

08022804 <_fini>:
 8022804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022806:	bf00      	nop
 8022808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802280a:	bc08      	pop	{r3}
 802280c:	469e      	mov	lr, r3
 802280e:	4770      	bx	lr
